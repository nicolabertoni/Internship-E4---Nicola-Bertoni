{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nicolabertoni/Internship-E4---Nicola-Bertoni/blob/main/Internship.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3EXqclP49Isq"
      },
      "source": [
        "# Optimization with quadratic datasets\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XwwoS87h1MLF"
      },
      "source": [
        "Uploading of the file"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "WOSvxUdaTkIL",
        "outputId": "182f4881-ac52-4136-99d9-824ca9f6d65f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8bacba6e-dbf2-40a9-bf10-05463e8c8d15\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8bacba6e-dbf2-40a9-bf10-05463e8c8d15\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 100_WR_R_DR_25.txt to 100_WR_R_DR_25.txt\n"
          ]
        }
      ],
      "source": [
        "import time\n",
        "import numpy as np\n",
        "from google.colab import files\n",
        "#First we download this provided dataset https://github.com/dwave-examples/knapsack/blob/master/data/very_large.csv\n",
        "#And then we upload it here\n",
        "uploaded = files.upload()  # Opens a file upload dialog"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QIgPFySWzL5s"
      },
      "outputs": [],
      "source": [
        "file = \"100_WR_R_DR_25.txt\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tqRmeacy1PYZ"
      },
      "source": [
        "###Loading of the new file"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SYpch6l2NqvU"
      },
      "outputs": [],
      "source": [
        "# First thing: we define a function which takes our dataset as a text file and returns the parameters for our model: coefficients (both quadratic and none), weights and capacity\n",
        "def load_qkp_data(filename):\n",
        "    with open(filename, 'r') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    # Parse number of items (n)\n",
        "    n = int(lines[0].strip())\n",
        "\n",
        "    # Parse profit matrix P (n x n)\n",
        "    P = np.zeros((n, n), dtype=int)\n",
        "    diag_row = list(map(int, lines[1].strip().split()))\n",
        "    for i in range(n):\n",
        "        P[i][i] = diag_row[i]\n",
        "        row = list(map(int, lines[i+2].strip().split())) #in ordine: prendo la linea di testo, rimuovo gli spazi, suddivido ogni numero in un elemento della lista, e lo converto a numero intero\n",
        "        P[i][i+1:] = row\n",
        "\n",
        "    # Parse weights and capacity\n",
        "    weights = list(map(int, lines[-1].strip().split()))  # Last line is weights\n",
        "    C = int(lines[-2].strip())  # Capacity is the second last value\n",
        "\n",
        "    return P, weights, C"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sk9RJhVSNdMB"
      },
      "outputs": [],
      "source": [
        "P, w, C = load_qkp_data(\"100_WR_R_DR_25.txt\")\n",
        "print(P)\n",
        "print(w)\n",
        "print(C)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BHm6oc-G0Qj4"
      },
      "source": [
        "#Smaller dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yg9Thzsa9H0A"
      },
      "source": [
        "I'll try to get a smaller dataset from the big one: just by taking only one quarter of the variables of the big one. We creat a function ad hoc to divide the dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "4WvGkjdD3LGZ",
        "outputId": "e5a3b3b9-0540-44af-cd9c-99d6e9eec3f8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-1aa4ec11-59da-42cd-876f-2dce7e812f75\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-1aa4ec11-59da-42cd-876f-2dce7e812f75\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 100_WR_M_DR_100.txt to 100_WR_M_DR_100.txt\n"
          ]
        }
      ],
      "source": [
        "import time\n",
        "import numpy as np\n",
        "from google.colab import files\n",
        "#First we download this provided dataset https://github.com/dwave-examples/knapsack/blob/master/data/very_large.csv\n",
        "#And then we upload it here\n",
        "uploaded = files.upload()  # Opens a file upload dialog"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "id": "cVtsigsr3LGa"
      },
      "outputs": [],
      "source": [
        "file = \"100_WR_M_DR_100.txt\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v3wA6alv9Fyo",
        "outputId": "dc1b5976-b4af-453e-c1fb-be193a741533"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[5643 1958 4734 4993 1680 4993 4993 3807 1707 2718 1847 2161 4993 1434]\n",
            " [   0 2608 1958 1958 1680 1958 1958 1958 1707 1958 1847 1958 1958 1434]\n",
            " [   0    0 5384 4734 1680 4734 4734 3807 1707 2718 1847 2161 4734 1434]\n",
            " [   0    0    0 5870 1680 5220 5220 3807 1707 2718 1847 2161 5220 1434]\n",
            " [   0    0    0    0 2330 1680 1680 1680 1680 1680 1680 1680 1680 1434]\n",
            " [   0    0    0    0    0 5982 5332 3807 1707 2718 1847 2161 5332 1434]\n",
            " [   0    0    0    0    0    0 6181 3807 1707 2718 1847 2161 5531 1434]\n",
            " [   0    0    0    0    0    0    0 4457 1707 2718 1847 2161 3807 1434]\n",
            " [   0    0    0    0    0    0    0    0 2357 1707 1707 1707 1707 1434]\n",
            " [   0    0    0    0    0    0    0    0    0 3368 1847 2161 2718 1434]\n",
            " [   0    0    0    0    0    0    0    0    0    0 2497 1847 1847 1434]\n",
            " [   0    0    0    0    0    0    0    0    0    0    0 2811 2161 1434]\n",
            " [   0    0    0    0    0    0    0    0    0    0    0    0 6747 1434]\n",
            " [   0    0    0    0    0    0    0    0    0    0    0    0    0 2084]]\n",
            "[5644, 1167, 1445, 1210, 262, 864, 1174, 6448, 1121, 2407, 3045, 1466, 3700, 3876]\n",
            "21430\n"
          ]
        }
      ],
      "source": [
        "# First thing: we define a function which takes our dataset as a text file and returns the parameters for our model: coefficients (both quadratic and none), weights and capacity\n",
        "def divide_qkp_data(filename, param = 5):\n",
        "    with open(filename, 'r') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "    # Parse number of items (n/5)\n",
        "    N = int(lines[0].strip())\n",
        "    n = N//param\n",
        "    # Parse profit matrix P (n x n)\n",
        "    P = np.zeros((n, n), dtype=int)\n",
        "    diag_row = list(map(int, lines[1].strip().split()))\n",
        "    for i in range(n):\n",
        "        P[i][i] = diag_row[i]\n",
        "        row = list(map(int, lines[i+2].strip().split())) #in ordine: prendo la linea di testo, rimuovo gli spazi, suddivido ogni numero in un elemento della lista, e lo converto a numero intero\n",
        "        P[i][i+1:] = row[:n-i-1]\n",
        "\n",
        "    # Parse weights and capacity\n",
        "    weights = list(map(int, lines[-1].strip().split()))  # Last line is weights\n",
        "    C = int(lines[-2].strip())\n",
        "    tightness = C / sum(weights)\n",
        "    weights_1 = weights [-n:]\n",
        "    #print(weights_1)\n",
        "    C_new = int(tightness * sum(weights_1))\n",
        "    #w = [(param//2)*x // param for x in weights_1]\n",
        "    #C = int(lines[-2].strip())//param  # Capacity is the second last value\n",
        "\n",
        "    return P, weights_1, C_new\n",
        "\n",
        "P, w, C = divide_qkp_data(\"100_WR_M_DR_100.txt\",7)\n",
        "print(P)\n",
        "print(w)\n",
        "print(C)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Methods"
      ],
      "metadata": {
        "id": "Cuxxkj1AkPMs"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FqG0BPw_0E63"
      },
      "source": [
        "###ExactPolySolver and Exact Solver"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zTWngdugzmAi",
        "outputId": "acc460e5-a34f-41b6-f30d-ba60e03cbb7a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting dwave-ocean-sdk\n",
            "  Downloading dwave_ocean_sdk-8.3.0-py3-none-any.whl.metadata (5.5 kB)\n",
            "Collecting dimod==0.12.20 (from dwave-ocean-sdk)\n",
            "  Downloading dimod-0.12.20-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)\n",
            "Collecting dwave-cloud-client==0.13.4 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_cloud_client-0.13.4-py3-none-any.whl.metadata (5.4 kB)\n",
            "Collecting dwave-gate==0.3.3 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_gate-0.3.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\n",
            "Collecting dwave-hybrid==0.6.14 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_hybrid-0.6.14-py3-none-any.whl.metadata (4.5 kB)\n",
            "Collecting dwave-inspector==0.5.3 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_inspector-0.5.3-py3-none-any.whl.metadata (4.4 kB)\n",
            "Collecting dwave-networkx==0.8.17 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_networkx-0.8.17-py3-none-any.whl.metadata (2.7 kB)\n",
            "Collecting dwave-optimization==0.6.0 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_optimization-0.6.0-cp311-cp311-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl.metadata (18 kB)\n",
            "Collecting dwave-preprocessing==0.6.8 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_preprocessing-0.6.8-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.5 kB)\n",
            "Collecting dwave-samplers==1.5.0 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_samplers-1.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n",
            "Collecting dwave-system==1.30.0 (from dwave-ocean-sdk)\n",
            "  Downloading dwave_system-1.30.0-py3-none-any.whl.metadata (3.4 kB)\n",
            "Collecting dwavebinarycsp==0.3.1 (from dwave-ocean-sdk)\n",
            "  Downloading dwavebinarycsp-0.3.1-py3-none-any.whl.metadata (3.0 kB)\n",
            "Collecting minorminer==0.2.18 (from dwave-ocean-sdk)\n",
            "  Downloading minorminer-0.2.18-cp311-cp311-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl.metadata (19 kB)\n",
            "Collecting penaltymodel==1.2.0 (from dwave-ocean-sdk)\n",
            "  Downloading penaltymodel-1.2.0-py3-none-any.whl.metadata (6.5 kB)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.11/dist-packages (from dimod==0.12.20->dwave-ocean-sdk) (2.0.2)\n",
            "Requirement already satisfied: requests<3,>=2.25 in /usr/local/lib/python3.11/dist-packages (from requests[socks]<3,>=2.25->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (2.32.3)\n",
            "Requirement already satisfied: urllib3<3,>=1.26 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (2.4.0)\n",
            "Requirement already satisfied: pydantic<3,>=2 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (2.11.5)\n",
            "Collecting homebase<2,>=1.0 (from dwave-cloud-client==0.13.4->dwave-ocean-sdk)\n",
            "  Downloading homebase-1.0.1-py2.py3-none-any.whl.metadata (3.3 kB)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (8.2.1)\n",
            "Requirement already satisfied: python-dateutil<3,>=2.7 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (2.9.0.post0)\n",
            "Collecting plucky<0.5,>=0.4.3 (from dwave-cloud-client==0.13.4->dwave-ocean-sdk)\n",
            "  Downloading plucky-0.4.3-py2.py3-none-any.whl.metadata (4.4 kB)\n",
            "Collecting diskcache<6,>=5.2.1 (from dwave-cloud-client==0.13.4->dwave-ocean-sdk)\n",
            "  Downloading diskcache-5.6.3-py3-none-any.whl.metadata (20 kB)\n",
            "Requirement already satisfied: packaging>=19 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (24.2)\n",
            "Requirement already satisfied: werkzeug<4,>=2.2 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (3.1.3)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.5.0 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (4.14.0)\n",
            "Collecting authlib<2,>=1.2 (from dwave-cloud-client==0.13.4->dwave-ocean-sdk)\n",
            "  Downloading authlib-1.6.0-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: importlib_metadata>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (8.7.0)\n",
            "Requirement already satisfied: orjson>=3.10 in /usr/local/lib/python3.11/dist-packages (from dwave-cloud-client==0.13.4->dwave-ocean-sdk) (3.10.18)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from dwave-hybrid==0.6.14->dwave-ocean-sdk) (3.5)\n",
            "Requirement already satisfied: Flask<4,>=2.2 in /usr/local/lib/python3.11/dist-packages (from dwave-inspector==0.5.3->dwave-ocean-sdk) (3.1.1)\n",
            "Requirement already satisfied: scipy>=1.7.3 in /usr/local/lib/python3.11/dist-packages (from dwave-system==1.30.0->dwave-ocean-sdk) (1.15.3)\n",
            "Collecting fasteners>=0.15 (from minorminer==0.2.18->dwave-ocean-sdk)\n",
            "  Downloading fasteners-0.19-py3-none-any.whl.metadata (4.9 kB)\n",
            "Requirement already satisfied: cryptography in /usr/local/lib/python3.11/dist-packages (from authlib<2,>=1.2->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (43.0.3)\n",
            "Requirement already satisfied: blinker>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from Flask<4,>=2.2->dwave-inspector==0.5.3->dwave-ocean-sdk) (1.9.0)\n",
            "Requirement already satisfied: itsdangerous>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from Flask<4,>=2.2->dwave-inspector==0.5.3->dwave-ocean-sdk) (2.2.0)\n",
            "Requirement already satisfied: jinja2>=3.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask<4,>=2.2->dwave-inspector==0.5.3->dwave-ocean-sdk) (3.1.6)\n",
            "Requirement already satisfied: markupsafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from Flask<4,>=2.2->dwave-inspector==0.5.3->dwave-ocean-sdk) (3.0.2)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib_metadata>=5.0.0->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (3.22.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (0.4.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<3,>=2.7->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (1.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.25->requests[socks]<3,>=2.25->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.25->requests[socks]<3,>=2.25->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (3.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.25->requests[socks]<3,>=2.25->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (2025.4.26)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.11/dist-packages (from requests[socks]<3,>=2.25->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (1.7.1)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.11/dist-packages (from cryptography->authlib<2,>=1.2->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (1.17.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.12->cryptography->authlib<2,>=1.2->dwave-cloud-client==0.13.4->dwave-ocean-sdk) (2.22)\n",
            "Downloading dwave_ocean_sdk-8.3.0-py3-none-any.whl (8.4 kB)\n",
            "Downloading dimod-0.12.20-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (9.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m95.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwave_cloud_client-0.13.4-py3-none-any.whl (160 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m160.8/160.8 kB\u001b[0m \u001b[31m17.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwave_gate-0.3.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m67.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwave_hybrid-0.6.14-py3-none-any.whl (78 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.3/78.3 kB\u001b[0m \u001b[31m8.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwave_inspector-0.5.3-py3-none-any.whl (30 kB)\n",
            "Downloading dwave_networkx-0.8.17-py3-none-any.whl (103 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m103.7/103.7 kB\u001b[0m \u001b[31m11.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwave_optimization-0.6.0-cp311-cp311-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl (3.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.4/3.4 MB\u001b[0m \u001b[31m16.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwave_preprocessing-0.6.8-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.4/3.4 MB\u001b[0m \u001b[31m36.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwave_samplers-1.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (9.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.0/9.0 MB\u001b[0m \u001b[31m18.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwave_system-1.30.0-py3-none-any.whl (106 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m106.9/106.9 kB\u001b[0m \u001b[31m12.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dwavebinarycsp-0.3.1-py3-none-any.whl (35 kB)\n",
            "Downloading minorminer-0.2.18-cp311-cp311-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl (3.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.9/3.9 MB\u001b[0m \u001b[31m20.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading penaltymodel-1.2.0-py3-none-any.whl (36 kB)\n",
            "Downloading authlib-1.6.0-py2.py3-none-any.whl (239 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m240.0/240.0 kB\u001b[0m \u001b[31m26.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading diskcache-5.6.3-py3-none-any.whl (45 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.5/45.5 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading fasteners-0.19-py3-none-any.whl (18 kB)\n",
            "Downloading homebase-1.0.1-py2.py3-none-any.whl (11 kB)\n",
            "Downloading plucky-0.4.3-py2.py3-none-any.whl (10 kB)\n",
            "Installing collected packages: plucky, homebase, fasteners, dwave-optimization, dwave-gate, diskcache, dimod, penaltymodel, dwave-samplers, dwave-preprocessing, dwave-networkx, minorminer, dwavebinarycsp, authlib, dwave-cloud-client, dwave-system, dwave-inspector, dwave-hybrid, dwave-ocean-sdk\n",
            "Successfully installed authlib-1.6.0 dimod-0.12.20 diskcache-5.6.3 dwave-cloud-client-0.13.4 dwave-gate-0.3.3 dwave-hybrid-0.6.14 dwave-inspector-0.5.3 dwave-networkx-0.8.17 dwave-ocean-sdk-8.3.0 dwave-optimization-0.6.0 dwave-preprocessing-0.6.8 dwave-samplers-1.5.0 dwave-system-1.30.0 dwavebinarycsp-0.3.1 fasteners-0.19 homebase-1.0.1 minorminer-0.2.18 penaltymodel-1.2.0 plucky-0.4.3\n"
          ]
        }
      ],
      "source": [
        "!pip install dwave-ocean-sdk\n",
        "import dimod\n",
        "from dimod import BinaryQuadraticModel"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UsbKr8L6knuR"
      },
      "source": [
        "PolySolver"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "elI310tS-isT"
      },
      "outputs": [],
      "source": [
        "from dimod import ExactPolySolver\n",
        "import numpy as np\n",
        "def solve_qkp_with_polysolver(P, w, C, lambda_penalty=None):\n",
        "    n = len(w)\n",
        "\n",
        "    if lambda_penalty is None:\n",
        "        lambda_penalty = np.max(P)*10\n",
        "    #Slack variables (computing the coefficients)\n",
        "    max_slack = C - min(w)\n",
        "    slack_bits = int(np.ceil(np.log2(max_slack + 1)))  # n° di bit per rappresentare lo slack\n",
        "    z_weights = [1 << i for i in range(slack_bits)]  # es: [1, 2, 4]\n",
        "\n",
        "    # Build BQM as Polynomial\n",
        "    bqm = BinaryQuadraticModel(\"BINARY\")\n",
        "    # Profit terms\n",
        "    for i in range(n):\n",
        "      bqm.add_variable(f\"x_{i}\", -P[i, i])  # Linear terms\n",
        "      for j in range(i + 1, n):  # Upper triangle only\n",
        "          bqm.add_interaction(f\"x_{i}\", f\"x_{j}\", -P[i, j])  # Quadratic terms (already symmetric)\n",
        "\n",
        "    # Penalty terms\n",
        "    for i in range(n):\n",
        "        bqm.add_variable(f\"x_{i}\", lambda_penalty * (w[i]*w[i] - 2*w[i]* C))\n",
        "\n",
        "    for k in range(slack_bits):\n",
        "      bqm.add_variable(f\"z_{k}\", lambda_penalty * (z_weights[k]*z_weights[k] - 2*z_weights[k]* C))\n",
        "\n",
        "    for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "            bqm.add_interaction(f\"x_{i}\", f\"x_{j}\", 2 * lambda_penalty * w[i] * w[j])\n",
        "\n",
        "    for k in range(slack_bits):\n",
        "      for h in range(k + 1, slack_bits):\n",
        "          bqm.add_interaction(f\"z_{k}\", f\"z_{h}\", 2 * lambda_penalty * z_weights[k]* z_weights[h])\n",
        "\n",
        "    for i in range(n):\n",
        "      for k in range(slack_bits):\n",
        "            bqm.add_interaction(f\"x_{i}\", f\"z_{k}\", 2 * lambda_penalty * w[i] * z_weights[k])\n",
        "\n",
        "        # Use ExactSolver\n",
        "    #sampler = ExactSolver()\n",
        "    #sampleset = sampler.sample(bqm)\n",
        "    sampler = ExactPolySolver()\n",
        "\n",
        "    start_time = time.time()\n",
        "    sampleset = sampler.sample_poly(bqm)\n",
        "    runtime = time.time() - start_time\n",
        "\n",
        "    best_sample = sampleset.first.sample\n",
        "    best_energy = sampleset.first.energy\n",
        "\n",
        "    selected_items = [int(var.split('_')[1]) for var, val in best_sample.items() if val == 1 and var.startswith(\"x_\")]\n",
        "    #print(best_sample.items())\n",
        "    total_weight = sum(w[i] for i in selected_items)\n",
        "    total_profit = sum(P[i, j] for i in selected_items for j in selected_items)\n",
        "\n",
        "    return selected_items, total_weight, total_profit, runtime, best_energy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yri0zq0u-5uN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f0718de-d5b4-4ce8-b457-faf73b695a5e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selected items: [0, 1, 10, 11, 13, 2, 3, 4, 5, 6, 7, 8, 9]\n",
            "Total weight: 3155 / 3421\n",
            "Total profit: 28763\n",
            "Feasible? Yes\n",
            "Best energy: -58282168943.0\n",
            "Runtime: 126.93321228027344\n"
          ]
        }
      ],
      "source": [
        "# For small problems (up to ~20 variables)\n",
        "selected_items, total_weight, total_profit, runtime, best_energy = solve_qkp_with_polysolver(P, w, C)\n",
        "\n",
        "print(\"Selected items:\", selected_items)\n",
        "print(\"Total weight:\", total_weight, \"/\", C)\n",
        "print(\"Total profit:\", total_profit)\n",
        "print(\"Feasible?\", \"Yes\" if total_weight <= C else \"No\")\n",
        "print(\"Best energy:\", best_energy)\n",
        "print(\"Runtime:\", runtime)\n",
        "\n",
        "runtimes = np.zeros(10)\n",
        "for i in range(10):\n",
        "  _, _, _, runtimes[i], _ = solve_qkp_with_polysolver(P, w, C)\n",
        "\n",
        "print(runtimes)\n",
        "print(\"Average runtime:\", np.mean(runtimes))\n",
        "print(\"Standard deviation of runtimes:\", np.std(runtimes))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "runtimes = np.zeros(10)\n",
        "for i in range(10):\n",
        "  _, _, _, runtimes[i], _ = solve_qkp_with_polysolver(P, w, C)\n",
        "\n",
        "print(runtimes)\n",
        "print(\"Average runtime:\", np.mean(runtimes))\n",
        "print(\"Standard deviation of runtimes:\", np.std(runtimes))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S7ZaPWDTNcST",
        "outputId": "696e4832-1fe7-4431-d64f-e3bbee4dd506"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[145.79495811 138.3217144  136.66533732 129.75007677 119.8190403\n",
            " 120.12439728 120.34836054 120.93010139 120.43410277 122.03932452]\n",
            "Average runtime: 127.42274134159088\n",
            "Standard deviation of runtimes: 9.100953862906984\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Gc1PE4EkqVe"
      },
      "source": [
        "ExactSolver"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zvXBSsJl8M6u"
      },
      "outputs": [],
      "source": [
        "from dimod.reference.samplers import ExactSolver\n",
        "import numpy as np\n",
        "def solve_qkp_with_exactsolver(P, w, C, lambda_penalty=None):\n",
        "    n = len(w)\n",
        "\n",
        "    if lambda_penalty is None:\n",
        "        lambda_penalty = np.max(P)*10\n",
        "    #Slack variables (computing the coefficients)\n",
        "    max_slack = C - min(w)\n",
        "    slack_bits = int(np.ceil(np.log2(max_slack + 1)))  # n° di bit per rappresentare lo slack\n",
        "    z_weights = [1 << i for i in range(slack_bits)]  # es: [1, 2, 4]\n",
        "\n",
        "    # Build BQM as Polynomial\n",
        "    bqm = BinaryQuadraticModel(\"BINARY\")\n",
        "    # Profit terms\n",
        "    for i in range(n):\n",
        "      bqm.add_variable(f\"x_{i}\", -P[i, i])  # Linear terms\n",
        "      for j in range(i + 1, n):  # Upper triangle only\n",
        "          bqm.add_interaction(f\"x_{i}\", f\"x_{j}\", -P[i, j])  # Quadratic terms (already symmetric)\n",
        "\n",
        "    # Penalty terms\n",
        "    for i in range(n):\n",
        "        bqm.add_variable(f\"x_{i}\", lambda_penalty * (w[i]*w[i] - 2*w[i]* C))\n",
        "\n",
        "    for k in range(slack_bits):\n",
        "      bqm.add_variable(f\"z_{k}\", lambda_penalty * (z_weights[k]*z_weights[k] - 2*z_weights[k]* C))\n",
        "\n",
        "    for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "            bqm.add_interaction(f\"x_{i}\", f\"x_{j}\", 2 * lambda_penalty * w[i] * w[j])\n",
        "\n",
        "    for k in range(slack_bits):\n",
        "      for h in range(k + 1, slack_bits):\n",
        "          bqm.add_interaction(f\"z_{k}\", f\"z_{h}\", 2 * lambda_penalty * z_weights[k]* z_weights[h])\n",
        "\n",
        "    for i in range(n):\n",
        "      for k in range(slack_bits):\n",
        "            bqm.add_interaction(f\"x_{i}\", f\"z_{k}\", 2 * lambda_penalty * w[i] * z_weights[k])\n",
        "\n",
        "    # Use ExactSolver\n",
        "    #print(bqm)\n",
        "    sampler = ExactSolver()\n",
        "\n",
        "    start_time = time.time()\n",
        "    sampleset = sampler.sample(bqm)\n",
        "    runtime = time.time() - start_time\n",
        "    #print(sampleset)\n",
        "\n",
        "    best_sample = sampleset.first.sample\n",
        "    best_energy = sampleset.first.energy\n",
        "\n",
        "    selected_items = [int(var.split('_')[1]) for var, val in best_sample.items() if val == 1 and var.startswith(\"x_\")]\n",
        "    print(selected_items)\n",
        "    total_weight = sum(w[i] for i in selected_items)\n",
        "    total_profit = sum(P[i, j] for i in selected_items for j in selected_items)\n",
        "\n",
        "    return selected_items, total_weight, total_profit, runtime, best_energy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "kic66t_Z8iNq",
        "outputId": "a8ca7b57-3909-4413-cf6f-c54939b8b8e1"
      },
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "name 'solve_qkp_with_exactsolver' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-58b7d455b2a0>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# For small problems (up to ~20 variables)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mselected_items\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtotal_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtotal_profit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mruntime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbest_energy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msolve_qkp_with_exactsolver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mP\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Selected items:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselected_items\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Total weight:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtotal_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"/\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'solve_qkp_with_exactsolver' is not defined"
          ]
        }
      ],
      "source": [
        "# For small problems (up to ~20 variables)\n",
        "selected_items, total_weight, total_profit, runtime, best_energy = solve_qkp_with_exactsolver(P, w, C)\n",
        "\n",
        "print(\"Selected items:\", selected_items)\n",
        "print(\"Total weight:\", total_weight, \"/\", C)\n",
        "print(\"Total profit:\", total_profit)\n",
        "print(\"Feasible?\", \"Yes\" if total_weight <= C else \"No\")\n",
        "print(\"Best energy:\", best_energy)\n",
        "print(\"Runtime:\", runtime)\n",
        "\n",
        "runtimes = np.zeros(10)\n",
        "\n",
        "print(runtimes)\n",
        "for i in range(10):\n",
        "  _, _, _, runtimes[i], _ = solve_qkp_with_polysolver(P, w, C)\n",
        "\n",
        "mean = np.mean(runtimes)\n",
        "std = np.std(runtimes)\n",
        "print(\"Average runtime:\", mean)\n",
        "print(\"Standard deviation of runtimes:\", std)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dexmowtbkvT1"
      },
      "source": [
        "###Other way to obtain a dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "ewmXcz5TTmRK",
        "outputId": "309b7a7f-e65d-4ce1-dc56-2a16ea70b719"
      },
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "name 'dimod' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-30a1851d5934>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Other possible ways to generate the dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mbqm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdimod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerators\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgnp_random_bqm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'BINARY'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;31m# it generates a dataset randomly with a given probability 0.5 to have quadratic interactions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mbqm2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdimod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerators\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mknapsack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#fare prova\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'dimod' is not defined"
          ]
        }
      ],
      "source": [
        "#Other possible ways to generate the dataset\n",
        "bqm = dimod.generators.gnp_random_bqm(20, 0.5, 'BINARY')\n",
        "    # it generates a dataset randomly with a given probability 0.5 to have quadratic interactions\n",
        "bqm2 = dimod.generators.knapsack(100) #fare prova"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Pnu5cO_SAab"
      },
      "source": [
        "### Simulated Annealing and Tabu Search"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lJypqRMVNy9p"
      },
      "outputs": [],
      "source": [
        "from dwave.samplers import SimulatedAnnealingSampler\n",
        "from dwave.samplers import TabuSampler"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BocZvJHWSOJ1"
      },
      "source": [
        "Meaning of the inputs: First, we recall that β = 1/T, where T is the temperature. Start the annealing at β = 0.1 (left extreme of the interval) (high temperature and high randomness) End the annealing at β = 4.2 (right extreme of the interval) (low temperature, focused on low energy)\n",
        "\n",
        "beta_schedule_type='linear': Linearly increase β from 0.1 to 4.2 over the annealing process (i.e., gradually cool the system). Another possible option could have been 'geometric'.\n",
        "\n",
        "num_sweeps: Each sweep is one full pass over all variables (flipping them one by one to reduce energy). More sweeps → longer and deeper local search → potentially better-quality solutions.\n",
        "\n",
        "num_reads: number of independent solution attempts"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wn2z-yCQyS0S"
      },
      "outputs": [],
      "source": [
        "# SIMULATED ANNEALING\n",
        "def solve_qkp_with_SA(P, w, C, lambda_penalty=None, num_reads=1000000):\n",
        "    n = len(w)\n",
        "\n",
        "    if lambda_penalty is None:\n",
        "        lambda_penalty = np.max(P)*100\n",
        "    #Slack variables (computing the coefficients)\n",
        "    max_slack = C - min(w)\n",
        "    slack_bits = int(np.ceil(np.log2(max_slack + 1)))  # n° di bit per rappresentare lo slack\n",
        "    z_weights = [1 << i for i in range(slack_bits)]  # es: [1, 2, 4]\n",
        "\n",
        "    # Build BQM as Polynomial\n",
        "    bqm = BinaryQuadraticModel(\"BINARY\")\n",
        "    # Profit terms\n",
        "    for i in range(n):\n",
        "      bqm.add_variable(f\"x_{i}\", -P[i, i])  # Linear terms\n",
        "      for j in range(i + 1, n):  # Upper triangle only\n",
        "          bqm.add_interaction(f\"x_{i}\", f\"x_{j}\", -P[i, j])  # Quadratic terms (already symmetric)\n",
        "\n",
        "    # Penalty terms\n",
        "    for i in range(n):\n",
        "        bqm.add_variable(f\"x_{i}\", lambda_penalty * (w[i]*w[i] - 2*w[i]* C))\n",
        "\n",
        "    for k in range(slack_bits):\n",
        "      bqm.add_variable(f\"z_{k}\", lambda_penalty * (z_weights[k]*z_weights[k] - 2*z_weights[k]* C))\n",
        "\n",
        "    for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "            bqm.add_interaction(f\"x_{i}\", f\"x_{j}\", 2 * lambda_penalty * w[i] * w[j])\n",
        "\n",
        "    for k in range(slack_bits):\n",
        "      for h in range(k + 1, slack_bits):\n",
        "          bqm.add_interaction(f\"z_{k}\", f\"z_{h}\", 2 * lambda_penalty * z_weights[k]* z_weights[h])\n",
        "\n",
        "    for i in range(n):\n",
        "      for k in range(slack_bits):\n",
        "            bqm.add_interaction(f\"x_{i}\", f\"z_{k}\", 2 * lambda_penalty * w[i] * z_weights[k])\n",
        "\n",
        "\n",
        "    # Run Simulated Annealing\n",
        "    sampler = SimulatedAnnealingSampler()\n",
        "\n",
        "    start_time = time.time()\n",
        "    sampleset =  sampler.sample(\n",
        "    bqm,\n",
        "    num_reads=500000,\n",
        "    #beta_range=[0.1, 5.0],\n",
        "    beta_schedule_type='linear',\n",
        "    num_sweeps=5000)\n",
        "    runtime = time.time() - start_time\n",
        "\n",
        "    # Get best solution\n",
        "    best_sample = sampleset.first.sample\n",
        "    best_energy = sampleset.first.energy\n",
        "    selected_items = [int(var.split('_')[1]) for var, val in best_sample.items() if val == 1 and var.startswith(\"x_\")]\n",
        "    total_weight = sum(w[i] for i in selected_items)\n",
        "    total_profit = sum(P[i, j] for i in selected_items for j in selected_items)\n",
        "\n",
        "    return selected_items, total_weight, total_profit, runtime, best_energy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hKopcslzhBmJ",
        "outputId": "d21f3ba0-1e68-447a-b9ef-e967c1c0ce67"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selected items (indices): [67, 68, 7, 70, 72, 77, 8, 82, 83, 85, 86, 87, 90, 93, 95]\n",
            "Total weight: 1585 / 1588\n",
            "Total profit: 5880\n",
            "Feasible? Yes\n",
            "Runtime: 586.8290064334869 seconds\n",
            "Best energy: -30765282680.0\n"
          ]
        }
      ],
      "source": [
        "# Solve QKP with Simulated Annealing\n",
        "selected_items, total_weight, total_profit, runtime, best_energy = solve_qkp_with_SA(P, w, C, num_reads=5000)\n",
        "\n",
        "# Output results\n",
        "print(\"Selected items (indices):\", selected_items)\n",
        "print(\"Total weight:\", total_weight, \"/\", C)\n",
        "print(\"Total profit:\", total_profit)\n",
        "print(\"Feasible?\", \"Yes\" if total_weight <= C else \"No\")\n",
        "print(\"Runtime:\", runtime, \"seconds\")\n",
        "print(\"Best energy:\", best_energy)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mrcEEMfXwSPM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7b94f78b-4fd1-428f-a2e2-0e00e1c36e5f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average runtime: 1.5461336612701415\n",
            "Standard deviation of runtimes: 0.183749407746142\n"
          ]
        }
      ],
      "source": [
        "runtimes = np.zeros(10)\n",
        "for i in range(10):\n",
        "  _, _, _, runtimes[i], _ = solve_qkp_with_SA(P, w, C)\n",
        "\n",
        "mean = np.mean(runtimes)\n",
        "std = np.std(runtimes)\n",
        "print(\"Average runtime:\", mean)\n",
        "print(\"Standard deviation of runtimes:\", std)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KBAiIKZ2Hw_v"
      },
      "outputs": [],
      "source": [
        "# TABU SEARCH\n",
        "def solve_qkp_with_TS(P, w, C, lambda_penalty=None, num_reads=10000, tenure=1):\n",
        "    n = len(w)\n",
        "\n",
        "    if lambda_penalty is None:\n",
        "        lambda_penalty = np.max(P)*100\n",
        "    #Slack variables (computing the coefficients)\n",
        "    max_slack = C - min(w)\n",
        "    slack_bits = int(np.ceil(np.log2(max_slack + 1)))  # n° di bit per rappresentare lo slack\n",
        "    z_weights = [1 << i for i in range(slack_bits)]  # es: [1, 2, 4]\n",
        "\n",
        "    # Build BQM as Polynomial\n",
        "    bqm = BinaryQuadraticModel(\"BINARY\")\n",
        "    # Profit terms\n",
        "    for i in range(n):\n",
        "      bqm.add_variable(f\"x_{i}\", -P[i, i])  # Linear terms\n",
        "      for j in range(i + 1, n):  # Upper triangle only\n",
        "          bqm.add_interaction(f\"x_{i}\", f\"x_{j}\", -P[i, j])  # Quadratic terms (already symmetric)\n",
        "\n",
        "    # Penalty terms\n",
        "    for i in range(n):\n",
        "        bqm.add_variable(f\"x_{i}\", lambda_penalty * (w[i]*w[i] - 2*w[i]* C))\n",
        "\n",
        "    for k in range(slack_bits):\n",
        "      bqm.add_variable(f\"z_{k}\", lambda_penalty * (z_weights[k]*z_weights[k] - 2*z_weights[k]* C))\n",
        "\n",
        "    for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "            bqm.add_interaction(f\"x_{i}\", f\"x_{j}\", 2 * lambda_penalty * w[i] * w[j])\n",
        "\n",
        "    for k in range(slack_bits):\n",
        "      for h in range(k + 1, slack_bits):\n",
        "          bqm.add_interaction(f\"z_{k}\", f\"z_{h}\", 2 * lambda_penalty * z_weights[k]* z_weights[h])\n",
        "\n",
        "    for i in range(n):\n",
        "      for k in range(slack_bits):\n",
        "            bqm.add_interaction(f\"x_{i}\", f\"z_{k}\", 2 * lambda_penalty * w[i] * z_weights[k])\n",
        "\n",
        "    # Run Simulated Annealing\n",
        "    sampler = TabuSampler()\n",
        "\n",
        "    start_time = time.time()\n",
        "    sampleset = sampler.sample(bqm, num_reads= num_reads, tenure= tenure, initial_states=None, timeout=None)\n",
        "    runtime = time.time() - start_time\n",
        "\n",
        "    # Get best solution\n",
        "    best_sample = sampleset.first.sample\n",
        "    best_energy = sampleset.first.energy\n",
        "    selected_items = [int(var.split('_')[1]) for var, val in best_sample.items() if val == 1]\n",
        "    total_weight = sum(w[i] for i in selected_items)\n",
        "    total_profit = sum(P[i, j] for i in selected_items for j in selected_items)\n",
        "\n",
        "    return selected_items, total_weight, total_profit, runtime, best_energy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eF-S3Bg8hLse"
      },
      "outputs": [],
      "source": [
        "# Solve QKP with TabuSearch\n",
        "selected_items, total_weight, total_profit, runtime, best_energy = solve_qkp_with_TS(P, w, C, num_reads=100)\n",
        "\n",
        "# Output results\n",
        "print(\"Selected items (indices):\", selected_items)\n",
        "print(\"Total weight:\", total_weight, \"/\", C)\n",
        "print(\"Total profit:\", total_profit)\n",
        "print(\"Feasible?\", \"Yes\" if total_weight <= C else \"No\")\n",
        "print(\"Runtime:\", runtime, \"seconds\")\n",
        "print(\"Best energy:\", best_energy)\n",
        "\n",
        "runtimes = np.zeros(10)\n",
        "\n",
        "for i in range(10):\n",
        "  _, _, _, runtimes[i], _ = solve_qkp_with_TS(P, w, C, num_read = 100)\n",
        "\n",
        "mean = np.mean(runtimes)\n",
        "std = np.std(runtimes)\n",
        "print(\"Average runtime:\", mean)\n",
        "print(\"Standard deviation of runtimes:\", std)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hIgXGkXcR8rp"
      },
      "source": [
        "### Gurobi"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e9uTSj_rN2pF",
        "outputId": "921edc60-645e-4576-bbf9-609e553273ca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gurobipy in /usr/local/lib/python3.11/dist-packages (12.0.2)\n"
          ]
        }
      ],
      "source": [
        "%pip install gurobipy\n",
        "import gurobipy as gp\n",
        "from gurobipy import GRB"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "collapsed": true,
        "id": "URf1n3_u7MbZ"
      },
      "outputs": [],
      "source": [
        "# Solving using Gurobi\n",
        "def solve_qkp_with_Gurobi(P, w, C):\n",
        "\n",
        "    # Create Gurobi model\n",
        "    model = gp.Model(\"QKP\")\n",
        "    model.setParam('OutputFlag', 1)  # Enable solver output: very useful to obtain infos while solving\n",
        "    #model.setParam('TimeLimit', 600)  # Limit to 10 minutes (adjust as needed)\n",
        "    #model.setParam('MIPGap', 0.75)   # Accept 5% optimality gap (faster termination)\n",
        "    model.setParam('Threads', 8)     # Use more CPU cores if available\n",
        "    model.setParam('Presolve', 2)       # Aggressive presolve\n",
        "    model.setParam('Heuristics', 0.5)   # Spend more time on heuristics\n",
        "    model.setParam('Cuts', 2)           # Generate aggressive cuts\n",
        "\n",
        "    n = len(w)\n",
        "    # Add binary variables\n",
        "    x = model.addVars(n, vtype=GRB.BINARY, name=\"x\")\n",
        "    # Set objective: maximize sum_{i,j} P[i][j] * x[i] * x[j]\n",
        "    objective = gp.QuadExpr() #Necessary for a quadratic expression\n",
        "    for i in range(n):\n",
        "        for j in range(n):\n",
        "            if P[i][j] != 0:  # Skip zero terms for efficiency\n",
        "                objective += P[i][j] * x[i] * x[j]\n",
        "    model.setObjective(objective, GRB.MAXIMIZE)\n",
        "    # Add knapsack constraint: sum_i w[i] * x[i] <= C\n",
        "    model.addConstr(gp.quicksum(w[i] * x[i] for i in range(n)) <= C, \"KnapsackConstraint\")\n",
        "\n",
        "    # Start solution\n",
        "    x_start = [0] * n\n",
        "    for i in sorted(range(n), key=lambda i: -P[i][i]/w[i]):\n",
        "      if w[i] <= C:\n",
        "        x_start[i] = 1\n",
        "        C -= w[i]\n",
        "    # Set the starting solution\n",
        "    for i in range(n):\n",
        "      x[i].Start = x_start[i]\n",
        "\n",
        "    # Optimize the model\n",
        "    start_time = time.time()\n",
        "    model.optimize()\n",
        "    runtime = time.time() - start_time\n",
        "\n",
        "    # Extract solution\n",
        "    if model.status == GRB.OPTIMAL:\n",
        "        selected_items = [i for i in range(n) if x[i].X > 0.5]\n",
        "        total_weight = sum(w[i] for i in selected_items)\n",
        "        total_profit = model.ObjVal\n",
        "       # total_energy = sum(P[i][j] for i in selected_items for j in selected_items)\n",
        "        return selected_items, total_weight, total_profit, runtime# total_energy\n",
        "    else:\n",
        "        raise Exception(\"No optimal solution found.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1qgDca46iKl8",
        "outputId": "7c219a71-34fd-4fb8-b5e4-3a231a5ba334"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.76 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Selected items (indices): [4, 5, 8]\n",
            "Total weight: 361 / 373\n",
            "Total profit: 700.0\n",
            "Feasible? Yes\n",
            "Runtime: 0.7985570430755615 seconds\n"
          ]
        }
      ],
      "source": [
        "# Solve QKP with Gurobi\n",
        "selected_items, total_weight, total_profit, runtime = solve_qkp_with_Gurobi(P, w, C)\n",
        "\n",
        "# Print results\n",
        "print(\"Selected items (indices):\", selected_items)\n",
        "print(\"Total weight:\", total_weight, \"/\", C)\n",
        "print(\"Total profit:\", total_profit)\n",
        "print(\"Feasible?\", \"Yes\" if total_weight <= C else \"No\")\n",
        "print(\"Runtime:\", runtime, \"seconds\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1L2WC4hI7PuG"
      },
      "source": [
        "Remark: from the test mad on this small dataset, it seems Gurobi find a better result, in terms of profit, than the other 2 methods: ExactPolySolver and SA. Why? It could be for the presence of big penalties in the 2 methods?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "RzJOtrn5mZWv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e3e193a-fdca-412f-fcd0-30bd55def0c1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.44 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.47 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.47 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.44 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.48 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.42 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.48 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.44 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.47 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Set parameter Heuristics to value 0.5\n",
            "Set parameter Cuts to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Heuristics  0.5\n",
            "Cuts  2\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 1 rows, 14 columns and 14 nonzeros\n",
            "Model fingerprint: 0x897fc691\n",
            "Model has 105 quadratic objective terms\n",
            "Variable types: 0 continuous, 14 integer (14 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+02, 1e+02]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  QObjective range [2e+02, 2e+02]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [4e+02, 4e+02]\n",
            "\n",
            "Loaded user MIP start with objective 676\n",
            "\n",
            "Presolve time: 0.00s\n",
            "Presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "Variable types: 0 continuous, 105 integer (105 binary)\n",
            "Root relaxation presolved: 92 rows, 105 columns, 287 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective 2.479286e+03, 58 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 2479.28571    0   14  676.00000 2479.28571   267%     -    0s\n",
            "H    0     0                     700.0000000 2479.28571   254%     -    0s\n",
            "     0     0 1277.30000    0   38  700.00000 1277.30000  82.5%     -    0s\n",
            "     0     0 1067.11538    0   48  700.00000 1067.11538  52.4%     -    0s\n",
            "     0     0 1062.50000    0   42  700.00000 1062.50000  51.8%     -    0s\n",
            "     0     2 1055.50000    0   37  700.00000 1055.50000  50.8%     -    0s\n",
            "\n",
            "Cutting planes:\n",
            "  Lift-and-project: 1\n",
            "  Cover: 1\n",
            "  Dual implied bound: 1\n",
            "  MIR: 1\n",
            "  StrongCG: 1\n",
            "  Flow cover: 1\n",
            "  RLT: 11\n",
            "\n",
            "Explored 64 nodes (2201 simplex iterations) in 0.51 seconds (0.03 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 2: 700 676 \n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective 7.000000000000e+02, best bound 7.000000000000e+02, gap 0.0000%\n",
            "Average runtime: 0.48509261608123777\n",
            "Standard deviation of runtimes: 0.026492136749547375\n"
          ]
        }
      ],
      "source": [
        "runtimes = np.zeros(10)\n",
        "for i in range(10):\n",
        "  _, _, _, runtimes[i]= solve_qkp_with_Gurobi(P, w, C)\n",
        "\n",
        "mean = np.mean(runtimes)\n",
        "std = np.std(runtimes)\n",
        "print(\"Average runtime:\", mean)\n",
        "print(\"Standard deviation of runtimes:\", std)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Gurobi with QUBO formulation\n"
      ],
      "metadata": {
        "id": "2XYnXpXwuFi5"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "164a0c84-7adb-4273-8d5e-8bf2092b34f6",
        "id": "KElxjDd6uQTR"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gurobipy in /usr/local/lib/python3.11/dist-packages (12.0.2)\n"
          ]
        }
      ],
      "source": [
        "%pip install gurobipy\n",
        "import gurobipy as gp\n",
        "from gurobipy import GRB"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "collapsed": true,
        "id": "D2Eatgh3uQTS"
      },
      "outputs": [],
      "source": [
        "import gurobipy as gp\n",
        "from gurobipy import GRB\n",
        "import numpy as np\n",
        "import time\n",
        "\n",
        "def solve_qkp_Gurobi_with_QUBO(P, w, C, lambda_penalty=None):\n",
        "    n = len(w)\n",
        "\n",
        "    if lambda_penalty is None:\n",
        "        lambda_penalty = np.max(P) * 0.5\n",
        "\n",
        "    # Slack variable encoding (binary encoding of slack)\n",
        "    max_slack = C - min(w)\n",
        "    slack_bits = int(np.ceil(np.log2(max_slack + 1)))\n",
        "    z_weights = [1 << i for i in range(slack_bits)]  # Powers of 2: 1, 2, 4, ...\n",
        "\n",
        "    model = gp.Model(\"QKP_Gurobi_with_QUBO\")\n",
        "    model.setParam('OutputFlag', 1)  # Enable solver output: very useful to obtain infos while solving\n",
        "    #model.setParam('TimeLimit', 600)  # Limit to 10 minutes (adjust as needed)\n",
        "    #model.setParam('MIPGap', 0.01)   # Accept 5% optimality gap (faster termination)\n",
        "    model.setParam('Threads', 8)     # Use more CPU cores if available\n",
        "    model.setParam('Presolve', 2)       # Aggressive presolve\n",
        "    #model.setParam('Heuristics', 0.5)   # Spend more time on heuristics\n",
        "    #model.setParam('Cuts', 2)           # Generate aggressive cuts\n",
        "\n",
        "    # Variables\n",
        "    x = model.addVars(n, vtype=GRB.BINARY, name=\"x\")\n",
        "    z = model.addVars(slack_bits, vtype=GRB.BINARY, name=\"z\")\n",
        "\n",
        "    # QUBO Objective: same logic as your SA version\n",
        "    obj = gp.QuadExpr()\n",
        "\n",
        "    # 1. Profit terms: -xᵀ P x\n",
        "    for i in range(n):\n",
        "        obj.add(-P[i, i] * x[i])  # linear\n",
        "        for j in range(i + 1, n):\n",
        "            obj.add(-P[i, j] * x[i] * x[j])  # quadratic\n",
        "\n",
        "    # 2. Penalty linear terms\n",
        "    for i in range(n):\n",
        "        obj.add(lambda_penalty * (w[i]**2 - 2 * w[i] * C) * x[i])\n",
        "    for k in range(slack_bits):\n",
        "        obj.add(lambda_penalty * (z_weights[k]**2 - 2 * z_weights[k] * C) * z[k])\n",
        "\n",
        "    # 3. Penalty quadratic terms (x-x)\n",
        "    for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "            obj.add(2 * lambda_penalty * w[i] * w[j] * x[i] * x[j])\n",
        "\n",
        "    # 4. Penalty quadratic terms (z-z)\n",
        "    for k in range(slack_bits):\n",
        "        for h in range(k + 1, slack_bits):\n",
        "            obj.add(2 * lambda_penalty * z_weights[k] * z_weights[h] * z[k] * z[h])\n",
        "\n",
        "    # 5. Penalty cross terms (x-z)\n",
        "    for i in range(n):\n",
        "        for k in range(slack_bits):\n",
        "            obj.add(2 * lambda_penalty * w[i] * z_weights[k] * x[i] * z[k])\n",
        "\n",
        "    # Set objective\n",
        "    model.setObjective(obj, GRB.MINIMIZE)  # MIN because of negative profits\n",
        "\n",
        "    # Optimize\n",
        "    start_time = time.time()\n",
        "    model.optimize()\n",
        "    runtime = time.time() - start_time\n",
        "\n",
        "    # Recover solution\n",
        "    if model.status == GRB.OPTIMAL or model.status == GRB.SUBOPTIMAL:\n",
        "        selected_items = [i for i in range(n) if x[i].X > 0.5]\n",
        "        total_weight = sum(w[i] for i in selected_items)\n",
        "        total_profit = sum(P[i, j] for i in selected_items for j in selected_items)\n",
        "        #best_energy = model.ObjVal\n",
        "        return selected_items, total_weight, total_profit, runtime\n",
        "    else:\n",
        "        raise Exception(\"No (sub)optimal solution found.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "61976cef-5aa9-400e-f884-463cf7f7a733",
        "id": "mkVwcdIbuQTS"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0x777cbe3b\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [3e+07, 3e+11]\n",
            "  QObjective range [5e+03, 4e+11]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -3.09853e+11\n",
            "Found heuristic solution: objective -3.09853e+11\n",
            "Presolve time: 0.01s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -7.990698e+11, 46 iterations, 0.02 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -7.991e+11    0   29 -3.099e+11 -7.991e+11   158%     -    0s\n",
            "     0     0 -3.897e+11    0  154 -3.099e+11 -3.897e+11  25.8%     -    0s\n",
            "     0     0 -3.536e+11    0  184 -3.099e+11 -3.536e+11  14.1%     -    1s\n",
            "     0     0 -3.535e+11    0  183 -3.099e+11 -3.535e+11  14.1%     -    1s\n",
            "     0     2 -3.535e+11    0  183 -3.099e+11 -3.535e+11  14.1%     -    1s\n",
            "*   56    71               8    -3.09853e+11 -3.535e+11  14.1%   145    1s\n",
            "*   57    71               8    -3.09853e+11 -3.535e+11  14.1%   143    1s\n",
            "  2997   826 -3.100e+11   17   93 -3.099e+11 -3.258e+11  5.16%  41.2    5s\n",
            "* 4234  1094              20    -3.09853e+11 -3.229e+11  4.21%  38.9    6s\n",
            "* 4235  1094              20    -3.09853e+11 -3.229e+11  4.21%  38.9    6s\n",
            "  8103  1805 -3.100e+11   16  203 -3.099e+11 -3.164e+11  2.11%  34.9   12s\n",
            "  8111  1810 -3.142e+11   12  218 -3.099e+11 -3.164e+11  2.11%  34.9   15s\n",
            "  9023  1893 -3.164e+11   19  150 -3.099e+11 -3.164e+11  2.11%  40.7   20s\n",
            " 10926  1903 -3.139e+11   18  128 -3.099e+11 -3.164e+11  2.11%  43.1   25s\n",
            " 15221  2185 -3.108e+11   25  114 -3.099e+11 -3.153e+11  1.76%  42.7   30s\n",
            " 19396  3128 -3.102e+11   25   92 -3.099e+11 -3.137e+11  1.24%  41.1   35s\n",
            " 24908  4039 -3.114e+11   24  153 -3.099e+11 -3.126e+11  0.88%  38.9   40s\n",
            " 31637  4909     cutoff   22      -3.099e+11 -3.119e+11  0.67%  36.7   45s\n",
            " 38592  5554     cutoff   31      -3.099e+11 -3.115e+11  0.54%  34.9   50s\n",
            " 44666  6026 -3.099e+11   29  123 -3.099e+11 -3.112e+11  0.43%  33.6   55s\n",
            " 52707  6299     cutoff   31      -3.099e+11 -3.108e+11  0.32%  32.2   60s\n",
            " 59201  6371     cutoff   26      -3.099e+11 -3.107e+11  0.26%  31.1   65s\n",
            " 67214  6027 -3.099e+11   28  106 -3.099e+11 -3.105e+11  0.19%  30.1   70s\n",
            " 75501  5234 -3.099e+11   29   93 -3.099e+11 -3.102e+11  0.12%  29.1   75s\n",
            " 83439  3535     cutoff   24      -3.099e+11 -3.101e+11  0.07%  28.4   80s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 5\n",
            "  Cover: 13\n",
            "  Dual implied bound: 39\n",
            "  MIR: 67\n",
            "  Flow cover: 196\n",
            "  Zero half: 56\n",
            "  RLT: 78\n",
            "  BQP: 276\n",
            "\n",
            "Explored 89729 nodes (2487272 simplex iterations) in 83.57 seconds (16.21 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 7: -3.09853e+11 -3.09853e+11 -3.09853e+11 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -3.098527380700e+11, best bound -3.098787238149e+11, gap 0.0084%\n",
            "Selected items (indices): [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12]\n",
            "Total weight: 20460 / 21430\n",
            "Total profit: 204040\n",
            "Feasible? Yes\n",
            "Runtime: 83.59767198562622 seconds\n"
          ]
        }
      ],
      "source": [
        "# Solve QKP with Gurobi\n",
        "selected_items, total_weight, total_profit, runtime = solve_qkp_Gurobi_with_QUBO(P, w, C)\n",
        "\n",
        "# Print results\n",
        "print(\"Selected items (indices):\", selected_items)\n",
        "print(\"Total weight:\", total_weight, \"/\", C)\n",
        "print(\"Total profit:\", total_profit)\n",
        "print(\"Feasible?\", \"Yes\" if total_weight <= C else \"No\")\n",
        "print(\"Runtime:\", runtime, \"seconds\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "runtimes = np.zeros(10)\n",
        "for i in range(10):\n",
        "  _, _, _, runtimes[i]= solve_qkp_Gurobi_with_QUBO(P, w, C)\n",
        "\n",
        "mean = np.mean(runtimes)\n",
        "std = np.std(runtimes)\n",
        "print(\"Average runtime:\", mean)\n",
        "print(\"Standard deviation of runtimes:\", std)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hT7aM0SQuW4W",
        "outputId": "c65df983-8fde-409c-d1ca-c759112de936"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.01s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    0s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    0s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    1s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    1s\n",
            "  2372   649 -1.550e+12   12   67 -1.549e+12 -1.656e+12  6.91%  54.7    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    6s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    7s\n",
            "  7007  1593 -1.571e+12   12  155 -1.549e+12 -1.594e+12  2.88%  43.0   10s\n",
            "  9107  1857 -1.587e+12   11  237 -1.549e+12 -1.587e+12  2.43%  40.7   15s\n",
            " 10574  1984 -1.583e+12   21  131 -1.549e+12 -1.587e+12  2.43%  44.0   20s\n",
            " 14104  1989 -1.566e+12   23  139 -1.549e+12 -1.587e+12  2.43%  44.0   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   28s\n",
            " 18243  2782 -1.558e+12   24  136 -1.549e+12 -1.576e+12  1.70%  42.2   30s\n",
            " 23706  3812     cutoff   29      -1.549e+12 -1.568e+12  1.19%  39.6   35s\n",
            " 30789  4932     cutoff   27      -1.549e+12 -1.562e+12  0.84%  36.9   40s\n",
            " 38988  5873 -1.552e+12   24  105 -1.549e+12 -1.559e+12  0.64%  34.5   45s\n",
            " 46909  6595 -1.552e+12   25  167 -1.549e+12 -1.557e+12  0.50%  32.9   50s\n",
            " 55846  7125 -1.550e+12   24   77 -1.549e+12 -1.555e+12  0.37%  31.4   55s\n",
            " 63273  7346     cutoff   31      -1.549e+12 -1.554e+12  0.28%  30.4   60s\n",
            " 72388  7353 -1.550e+12   27  123 -1.549e+12 -1.552e+12  0.20%  29.3   65s\n",
            " 81897  6593 -1.549e+12   28   85 -1.549e+12 -1.551e+12  0.12%  28.4   70s\n",
            " 88969  5503 -1.550e+12   28  101 -1.549e+12 -1.550e+12  0.08%  27.7   75s\n",
            " 98495  2481 -1.549e+12   30   82 -1.549e+12 -1.549e+12  0.01%  26.8   80s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 80.18 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.01s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.02 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    0s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    0s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    1s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    1s\n",
            "  1588   506 -1.557e+12   13  159 -1.549e+12 -1.729e+12  11.6%  59.3    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    7s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    7s\n",
            "  7422  1649     cutoff   20      -1.549e+12 -1.592e+12  2.75%  42.5   10s\n",
            "  9107  1857 -1.587e+12   11  237 -1.549e+12 -1.587e+12  2.43%  40.7   15s\n",
            " 10208  1982 -1.576e+12   22  130 -1.549e+12 -1.587e+12  2.43%  43.8   20s\n",
            " 14104  1989 -1.566e+12   23  139 -1.549e+12 -1.587e+12  2.43%  44.0   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   29s\n",
            " 17116  2516     cutoff   26      -1.549e+12 -1.578e+12  1.89%  42.7   30s\n",
            " 24371  3936 -1.551e+12   27  117 -1.549e+12 -1.567e+12  1.14%  39.4   35s\n",
            " 30789  4932     cutoff   27      -1.549e+12 -1.562e+12  0.84%  36.9   40s\n",
            " 38113  5766 -1.549e+12   26   85 -1.549e+12 -1.559e+12  0.66%  34.7   45s\n",
            " 45769  6522     cutoff   26      -1.549e+12 -1.557e+12  0.52%  33.1   50s\n",
            " 54012  7074 -1.550e+12   25   69 -1.549e+12 -1.555e+12  0.40%  31.7   55s\n",
            " 62412  7349 -1.549e+12   28  104 -1.549e+12 -1.554e+12  0.29%  30.5   60s\n",
            " 71582  7355 -1.550e+12   27   96 -1.549e+12 -1.553e+12  0.21%  29.3   65s\n",
            " 79172  6862     cutoff   31      -1.549e+12 -1.551e+12  0.14%  28.6   70s\n",
            " 88969  5503 -1.550e+12   28  101 -1.549e+12 -1.550e+12  0.08%  27.7   75s\n",
            " 98495  2481 -1.549e+12   30   82 -1.549e+12 -1.549e+12  0.01%  26.8   80s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 80.92 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.01s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    1s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    1s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    1s\n",
            "  2372   649 -1.550e+12   12   67 -1.549e+12 -1.656e+12  6.91%  54.7    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    6s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    6s\n",
            "  9094  1845 -1.552e+12   17  203 -1.549e+12 -1.587e+12  2.43%  40.3   10s\n",
            "  9107  1857 -1.587e+12   11  237 -1.549e+12 -1.587e+12  2.43%  40.7   15s\n",
            " 11155  2027 -1.587e+12   19  195 -1.549e+12 -1.587e+12  2.43%  44.2   20s\n",
            " 14905  1991 -1.552e+12   26  134 -1.549e+12 -1.587e+12  2.43%  43.7   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   27s\n",
            " 19597  3046 -1.554e+12   24  188 -1.549e+12 -1.574e+12  1.57%  41.5   30s\n",
            " 27418  4420     cutoff   27      -1.549e+12 -1.564e+12  0.98%  38.2   35s\n",
            " 32986  5144 -1.551e+12   24  115 -1.549e+12 -1.561e+12  0.78%  36.2   40s\n",
            " 40621  6020 -1.551e+12   26   80 -1.549e+12 -1.559e+12  0.61%  34.1   45s\n",
            " 48592  6730 -1.551e+12   25  112 -1.549e+12 -1.557e+12  0.48%  32.6   50s\n",
            " 56735  7167 -1.551e+12   26  114 -1.549e+12 -1.555e+12  0.36%  31.3   55s\n",
            " 66551  7372     cutoff   22      -1.549e+12 -1.553e+12  0.25%  29.9   60s\n",
            " 73226  7351 -1.549e+12   29   67 -1.549e+12 -1.552e+12  0.20%  29.2   65s\n",
            " 82805  6500 -1.549e+12   28   85 -1.549e+12 -1.551e+12  0.11%  28.3   70s\n",
            " 91674  4916     cutoff   30      -1.549e+12 -1.550e+12  0.06%  27.5   75s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 79.64 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.00s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.02 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    0s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    0s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    1s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    1s\n",
            "  2372   649 -1.550e+12   12   67 -1.549e+12 -1.656e+12  6.91%  54.7    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    6s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    6s\n",
            "  7422  1649     cutoff   20      -1.549e+12 -1.592e+12  2.75%  42.5   10s\n",
            "  9107  1857 -1.587e+12   11  237 -1.549e+12 -1.587e+12  2.43%  40.7   15s\n",
            " 10931  1982 -1.561e+12   24  107 -1.549e+12 -1.587e+12  2.43%  44.0   20s\n",
            " 14422  1915     cutoff   22      -1.549e+12 -1.587e+12  2.43%  43.9   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   28s\n",
            " 18656  2874 -1.558e+12   24  175 -1.549e+12 -1.575e+12  1.67%  42.0   30s\n",
            " 25019  4048     cutoff   26      -1.549e+12 -1.566e+12  1.10%  39.1   35s\n",
            " 30789  4932     cutoff   27      -1.549e+12 -1.562e+12  0.84%  36.9   40s\n",
            " 39793  5938 -1.549e+12   25   90 -1.549e+12 -1.559e+12  0.63%  34.3   45s\n",
            " 46909  6595 -1.552e+12   25  167 -1.549e+12 -1.557e+12  0.50%  32.9   50s\n",
            " 55846  7125 -1.550e+12   24   77 -1.549e+12 -1.555e+12  0.37%  31.4   55s\n",
            " 64120  7354 -1.550e+12   27   96 -1.549e+12 -1.553e+12  0.27%  30.2   60s\n",
            " 72388  7353 -1.550e+12   27  123 -1.549e+12 -1.552e+12  0.20%  29.3   65s\n",
            " 81897  6593 -1.549e+12   28   85 -1.549e+12 -1.551e+12  0.12%  28.4   70s\n",
            " 88969  5503 -1.550e+12   28  101 -1.549e+12 -1.550e+12  0.08%  27.7   75s\n",
            " 98495  2481 -1.549e+12   30   82 -1.549e+12 -1.549e+12  0.01%  26.8   80s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 80.08 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.01s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.02 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    0s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    0s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    1s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    1s\n",
            "  2088   604     cutoff   12      -1.549e+12 -1.684e+12  8.70%  56.6    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    7s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    7s\n",
            "  7007  1593 -1.571e+12   12  155 -1.549e+12 -1.594e+12  2.88%  43.0   10s\n",
            "  9107  1857 -1.587e+12   11  237 -1.549e+12 -1.587e+12  2.43%  40.7   15s\n",
            " 10208  1982 -1.576e+12   22  130 -1.549e+12 -1.587e+12  2.43%  43.8   20s\n",
            " 14104  1989 -1.566e+12   23  139 -1.549e+12 -1.587e+12  2.43%  44.0   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   28s\n",
            " 18243  2782 -1.558e+12   24  136 -1.549e+12 -1.576e+12  1.70%  42.2   30s\n",
            " 24371  3936 -1.551e+12   27  117 -1.549e+12 -1.567e+12  1.14%  39.4   35s\n",
            " 30789  4932     cutoff   27      -1.549e+12 -1.562e+12  0.84%  36.9   40s\n",
            " 38113  5766 -1.549e+12   26   85 -1.549e+12 -1.559e+12  0.66%  34.7   45s\n",
            " 46909  6595 -1.552e+12   25  167 -1.549e+12 -1.557e+12  0.50%  32.9   50s\n",
            " 55846  7125 -1.550e+12   24   77 -1.549e+12 -1.555e+12  0.37%  31.4   55s\n",
            " 63273  7346     cutoff   31      -1.549e+12 -1.554e+12  0.28%  30.4   60s\n",
            " 72388  7353 -1.550e+12   27  123 -1.549e+12 -1.552e+12  0.20%  29.3   65s\n",
            " 80092  6772     cutoff   26      -1.549e+12 -1.551e+12  0.13%  28.5   70s\n",
            " 88969  5503 -1.550e+12   28  101 -1.549e+12 -1.550e+12  0.08%  27.7   75s\n",
            " 98495  2481 -1.549e+12   30   82 -1.549e+12 -1.549e+12  0.01%  26.8   80s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 80.26 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.00s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.02 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    0s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    2s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    2s\n",
            "  1367   453 -1.585e+12   12  156 -1.549e+12 -1.740e+12  12.3%  61.6    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    7s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    7s\n",
            "  7422  1649     cutoff   20      -1.549e+12 -1.592e+12  2.75%  42.5   10s\n",
            "  9106  1853 -1.550e+12   16  271 -1.549e+12 -1.587e+12  2.43%  40.3   15s\n",
            " 10574  1984 -1.583e+12   21  131 -1.549e+12 -1.587e+12  2.43%  44.0   20s\n",
            " 14584  1943 -1.551e+12   24  114 -1.549e+12 -1.587e+12  2.43%  43.9   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   29s\n",
            " 17856  2689 -1.560e+12   24  130 -1.549e+12 -1.576e+12  1.74%  42.3   30s\n",
            " 25019  4048     cutoff   26      -1.549e+12 -1.566e+12  1.10%  39.1   35s\n",
            " 30789  4932     cutoff   27      -1.549e+12 -1.562e+12  0.84%  36.9   40s\n",
            " 38988  5873 -1.552e+12   24  105 -1.549e+12 -1.559e+12  0.64%  34.5   45s\n",
            " 47746  6668     cutoff   25      -1.549e+12 -1.557e+12  0.49%  32.8   50s\n",
            " 54936  7102     cutoff   30      -1.549e+12 -1.555e+12  0.39%  31.6   55s\n",
            " 64120  7354 -1.550e+12   27   96 -1.549e+12 -1.553e+12  0.27%  30.2   60s\n",
            " 72388  7353 -1.550e+12   27  123 -1.549e+12 -1.552e+12  0.20%  29.3   65s\n",
            " 80953  6692     cutoff   27      -1.549e+12 -1.551e+12  0.12%  28.5   70s\n",
            " 89845  5343 -1.550e+12   28  107 -1.549e+12 -1.550e+12  0.07%  27.7   75s\n",
            " 97452  2746     cutoff   26      -1.549e+12 -1.549e+12  0.01%  26.9   80s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 80.71 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.00s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    0s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    2s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    2s\n",
            "  2205   626 -1.555e+12   13  172 -1.549e+12 -1.670e+12  7.81%  56.1    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    6s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    7s\n",
            "  7962  1703 -1.550e+12   15  107 -1.549e+12 -1.590e+12  2.63%  41.5   10s\n",
            "  9107  1857 -1.587e+12   11  237 -1.549e+12 -1.587e+12  2.43%  40.7   15s\n",
            " 10931  1982 -1.561e+12   24  107 -1.549e+12 -1.587e+12  2.43%  44.0   20s\n",
            " 14104  1989 -1.566e+12   23  139 -1.549e+12 -1.587e+12  2.43%  44.0   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   28s\n",
            " 18243  2782 -1.558e+12   24  136 -1.549e+12 -1.576e+12  1.70%  42.2   30s\n",
            " 25019  4048     cutoff   26      -1.549e+12 -1.566e+12  1.10%  39.1   35s\n",
            " 30789  4932     cutoff   27      -1.549e+12 -1.562e+12  0.84%  36.9   40s\n",
            " 38988  5873 -1.552e+12   24  105 -1.549e+12 -1.559e+12  0.64%  34.5   45s\n",
            " 45769  6522     cutoff   26      -1.549e+12 -1.557e+12  0.52%  33.1   50s\n",
            " 54936  7102     cutoff   30      -1.549e+12 -1.555e+12  0.39%  31.6   55s\n",
            " 64950  7370 -1.552e+12   25  100 -1.549e+12 -1.553e+12  0.26%  30.1   60s\n",
            " 71582  7355 -1.550e+12   27   96 -1.549e+12 -1.553e+12  0.21%  29.3   65s\n",
            " 80953  6692     cutoff   27      -1.549e+12 -1.551e+12  0.12%  28.5   70s\n",
            " 88969  5503 -1.550e+12   28  101 -1.549e+12 -1.550e+12  0.08%  27.7   75s\n",
            " 98495  2481 -1.549e+12   30   82 -1.549e+12 -1.549e+12  0.01%  26.8   80s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 80.31 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.00s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.02 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    0s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    0s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    1s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    1s\n",
            "  2372   649 -1.550e+12   12   67 -1.549e+12 -1.656e+12  6.91%  54.7    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    6s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    7s\n",
            "  7422  1649     cutoff   20      -1.549e+12 -1.592e+12  2.75%  42.5   10s\n",
            "  9107  1857 -1.587e+12   11  237 -1.549e+12 -1.587e+12  2.43%  40.7   15s\n",
            " 10411  1963 -1.587e+12   19  191 -1.549e+12 -1.587e+12  2.43%  43.9   20s\n",
            " 14422  1915     cutoff   22      -1.549e+12 -1.587e+12  2.43%  43.9   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   28s\n",
            " 18656  2874 -1.558e+12   24  175 -1.549e+12 -1.575e+12  1.67%  42.0   30s\n",
            " 24371  3936 -1.551e+12   27  117 -1.549e+12 -1.567e+12  1.14%  39.4   35s\n",
            " 30789  4932     cutoff   27      -1.549e+12 -1.562e+12  0.84%  36.9   40s\n",
            " 38988  5873 -1.552e+12   24  105 -1.549e+12 -1.559e+12  0.64%  34.5   45s\n",
            " 45769  6522     cutoff   26      -1.549e+12 -1.557e+12  0.52%  33.1   50s\n",
            " 55846  7125 -1.550e+12   24   77 -1.549e+12 -1.555e+12  0.37%  31.4   55s\n",
            " 63273  7346     cutoff   31      -1.549e+12 -1.554e+12  0.28%  30.4   60s\n",
            " 72388  7353 -1.550e+12   27  123 -1.549e+12 -1.552e+12  0.20%  29.3   65s\n",
            " 80953  6692     cutoff   27      -1.549e+12 -1.551e+12  0.12%  28.5   70s\n",
            " 88969  5503 -1.550e+12   28  101 -1.549e+12 -1.550e+12  0.08%  27.7   75s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 80.01 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.00s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    1s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    2s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    2s\n",
            "  1367   453 -1.585e+12   12  156 -1.549e+12 -1.740e+12  12.3%  61.6    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    7s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    7s\n",
            "  7422  1649     cutoff   20      -1.549e+12 -1.592e+12  2.75%  42.5   10s\n",
            "  9106  1853 -1.550e+12   16  271 -1.549e+12 -1.587e+12  2.43%  40.3   15s\n",
            " 10411  1963 -1.587e+12   19  191 -1.549e+12 -1.587e+12  2.43%  43.9   20s\n",
            " 14422  1915     cutoff   22      -1.549e+12 -1.587e+12  2.43%  43.9   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   29s\n",
            " 17498  2591 -1.557e+12   24  131 -1.549e+12 -1.577e+12  1.82%  42.5   30s\n",
            " 25019  4048     cutoff   26      -1.549e+12 -1.566e+12  1.10%  39.1   35s\n",
            " 32069  5050 -1.549e+12   28   88 -1.549e+12 -1.562e+12  0.81%  36.5   40s\n",
            " 38988  5873 -1.552e+12   24  105 -1.549e+12 -1.559e+12  0.64%  34.5   45s\n",
            " 47746  6668     cutoff   25      -1.549e+12 -1.557e+12  0.49%  32.8   50s\n",
            " 54936  7102     cutoff   30      -1.549e+12 -1.555e+12  0.39%  31.6   55s\n",
            " 64950  7370 -1.552e+12   25  100 -1.549e+12 -1.553e+12  0.26%  30.1   60s\n",
            " 74043  7309     cutoff   30      -1.549e+12 -1.552e+12  0.19%  29.1   65s\n",
            " 81897  6593 -1.549e+12   28   85 -1.549e+12 -1.551e+12  0.12%  28.4   70s\n",
            " 90767  5124     cutoff   31      -1.549e+12 -1.550e+12  0.06%  27.6   75s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 79.78 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Set parameter OutputFlag to value 1\n",
            "Set parameter Threads to value 8\n",
            "Set parameter Presolve to value 2\n",
            "Gurobi Optimizer version 12.0.2 build v12.0.2rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.00GHz, instruction set [SSE2|AVX|AVX2|AVX512]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 8 threads\n",
            "\n",
            "Warning: Thread count (8) is larger than processor count (2)\n",
            "         Reduce the value of the Threads parameter to improve performance\n",
            "\n",
            "\n",
            "Non-default parameters:\n",
            "Presolve  2\n",
            "Threads  8\n",
            "\n",
            "Optimize a model with 0 rows, 29 columns and 0 nonzeros\n",
            "Model fingerprint: 0xf0f50c38\n",
            "Model has 406 quadratic objective terms\n",
            "Variable types: 0 continuous, 29 integer (29 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [0e+00, 0e+00]\n",
            "  Objective range  [1e+08, 1e+12]\n",
            "  QObjective range [3e+04, 2e+12]\n",
            "  Bounds range     [1e+00, 1e+00]\n",
            "  RHS range        [0e+00, 0e+00]\n",
            "Warning: Model contains large objective coefficients\n",
            "Warning: Model contains large quadratic objective coefficients\n",
            "         Consider reformulating model or setting NumericFocus parameter\n",
            "         to avoid numerical issues.\n",
            "Found heuristic solution: objective 0.0000000\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Found heuristic solution: objective -1.54926e+12\n",
            "Presolve time: 0.00s\n",
            "Presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "Variable types: 0 continuous, 435 integer (435 binary)\n",
            "Root relaxation presolved: 406 rows, 435 columns, 1218 nonzeros\n",
            "\n",
            "\n",
            "Root relaxation: objective -3.995349e+12, 46 iterations, 0.02 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0 -3.995e+12    0   29 -1.549e+12 -3.995e+12   158%     -    0s\n",
            "     0     0 -1.966e+12    0  154 -1.549e+12 -1.966e+12  26.9%     -    0s\n",
            "     0     0 -1.774e+12    0  229 -1.549e+12 -1.774e+12  14.5%     -    1s\n",
            "     0     0 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "     0     2 -1.772e+12    0  228 -1.549e+12 -1.772e+12  14.4%     -    1s\n",
            "*  176   112              15    -1.54926e+12 -1.772e+12  14.4%  91.8    2s\n",
            "*  177   112              15    -1.54926e+12 -1.772e+12  14.4%  91.3    2s\n",
            "  2205   626 -1.555e+12   13  172 -1.549e+12 -1.670e+12  7.81%  56.1    5s\n",
            "* 3502   798              11    -1.54926e+12 -1.624e+12  4.84%  49.7    6s\n",
            "* 4363   989              21    -1.54926e+12 -1.615e+12  4.26%  47.5    7s\n",
            "  8604  1844 -1.549e+12   19   74 -1.549e+12 -1.589e+12  2.55%  40.8   10s\n",
            "  9106  1853 -1.550e+12   16  271 -1.549e+12 -1.587e+12  2.43%  40.3   15s\n",
            " 10816  1982 -1.587e+12   18  143 -1.549e+12 -1.587e+12  2.43%  44.0   20s\n",
            " 14422  1915     cutoff   22      -1.549e+12 -1.587e+12  2.43%  43.9   25s\n",
            "*16599  2360              29    -1.54926e+12 -1.581e+12  2.05%  42.9   28s\n",
            " 18656  2874 -1.558e+12   24  175 -1.549e+12 -1.575e+12  1.67%  42.0   30s\n",
            " 26524  4296 -1.560e+12   23  142 -1.549e+12 -1.565e+12  1.02%  38.5   35s\n",
            " 32069  5050 -1.549e+12   28   88 -1.549e+12 -1.562e+12  0.81%  36.5   40s\n",
            " 40621  6020 -1.551e+12   26   80 -1.549e+12 -1.559e+12  0.61%  34.1   45s\n",
            " 48592  6730 -1.551e+12   25  112 -1.549e+12 -1.557e+12  0.48%  32.6   50s\n",
            " 57623  7187     cutoff   35      -1.549e+12 -1.555e+12  0.35%  31.2   55s\n",
            " 67341  7390 -1.550e+12   27   70 -1.549e+12 -1.553e+12  0.24%  29.8   60s\n",
            " 74043  7309     cutoff   30      -1.549e+12 -1.552e+12  0.19%  29.1   65s\n",
            " 83707  6367     cutoff   29      -1.549e+12 -1.551e+12  0.11%  28.2   70s\n",
            " 92552  4636     cutoff   28      -1.549e+12 -1.550e+12  0.05%  27.4   75s\n",
            "\n",
            "Cutting planes:\n",
            "  Gomory: 6\n",
            "  Cover: 12\n",
            "  Dual implied bound: 32\n",
            "  MIR: 59\n",
            "  Flow cover: 115\n",
            "  Zero half: 22\n",
            "  RLT: 77\n",
            "  BQP: 242\n",
            "\n",
            "Explored 99414 nodes (2654034 simplex iterations) in 78.67 seconds (15.52 work units)\n",
            "Thread count was 8 (of 2 available processors)\n",
            "\n",
            "Solution count 8: -1.54926e+12 -1.54926e+12 -1.54926e+12 ... 0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Best objective -1.549262874190e+12, best bound -1.549394037082e+12, gap 0.0085%\n",
            "Average runtime: 80.08580174446107\n",
            "Standard deviation of runtimes: 0.5900044717998134\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X9vflrVFujCi"
      },
      "source": [
        "##QAOA (with cudaQ)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fu8Rzg4U61X_",
        "outputId": "b6563142-62c4-434e-aaa2-0c62888cf5d3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: cudaq in /usr/local/lib/python3.11/dist-packages (0.11.0)\n",
            "Requirement already satisfied: cuda-quantum-cu12==0.11.0 in /usr/local/lib/python3.11/dist-packages (from cudaq) (0.11.0)\n",
            "Requirement already satisfied: astpretty~=3.0 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (3.0.0)\n",
            "Requirement already satisfied: cuquantum-python-cu12>=25.03 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (25.3.0)\n",
            "Requirement already satisfied: numpy>=1.24 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.10.1 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (1.15.3)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (2.32.3)\n",
            "Requirement already satisfied: nvidia-cublas-cu12~=12.0 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (12.5.3.2)\n",
            "Requirement already satisfied: nvidia-curand-cu12~=10.3 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (10.3.6.82)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12~=12.0 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (12.5.82)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12~=11.4 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (11.6.3.83)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12~=12.0 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (12.5.82)\n",
            "Requirement already satisfied: custatevec-cu12~=1.8 in /usr/local/lib/python3.11/dist-packages (from cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (1.8.0)\n",
            "Requirement already satisfied: cutensornet-cu12~=2.7 in /usr/local/lib/python3.11/dist-packages (from cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (2.7.0)\n",
            "Requirement already satisfied: cudensitymat-cu12~=0.1 in /usr/local/lib/python3.11/dist-packages (from cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (0.1.0)\n",
            "Requirement already satisfied: cupy-cuda12x>=13.0 in /usr/local/lib/python3.11/dist-packages (from cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (13.3.0)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.11/dist-packages (from nvidia-cusolver-cu12~=11.4->cuda-quantum-cu12==0.11.0->cudaq) (12.5.82)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12 in /usr/local/lib/python3.11/dist-packages (from nvidia-cusolver-cu12~=11.4->cuda-quantum-cu12==0.11.0->cudaq) (12.5.1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->cuda-quantum-cu12==0.11.0->cudaq) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->cuda-quantum-cu12==0.11.0->cudaq) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->cuda-quantum-cu12==0.11.0->cudaq) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->cuda-quantum-cu12==0.11.0->cudaq) (2025.4.26)\n",
            "Requirement already satisfied: cutensor-cu12<3,>=2.2 in /usr/local/lib/python3.11/dist-packages (from cudensitymat-cu12~=0.1->cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (2.2.0)\n",
            "Requirement already satisfied: fastrlock>=0.5 in /usr/local/lib/python3.11/dist-packages (from cupy-cuda12x>=13.0->cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (0.8.3)\n"
          ]
        }
      ],
      "source": [
        "!pip install cudaq"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "b4Xb4cit61YA"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import cudaq\n",
        "from scipy.optimize import minimize\n",
        "import time\n",
        "from cudaq import spin\n",
        "from typing import List"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GwEb88rVEuzq"
      },
      "outputs": [],
      "source": [
        "def compute_qkp_coefficients(P, w, C, lambda_penalty):\n",
        "    n = len(w)  # Number of items\n",
        "    slack_bits = int(np.ceil(np.log2(C + 1)))  # Bits needed for slack\n",
        "    z_weights = [2**k for k in range(slack_bits)]  # Slack bit weights [1, 2, 4, ...]\n",
        "\n",
        "    # --- Linear coefficients ---\n",
        "    coeff_linear_x = [\n",
        "        float(-P[i, i] + lambda_penalty * w[i] * (w[i] - 2 * C))\n",
        "        for i in range(n)\n",
        "    ]\n",
        "    coeff_linear_s = [\n",
        "        float(lambda_penalty * ( (2**k)**2 - 2 * (2**k) * C ))\n",
        "        for k in range(slack_bits)\n",
        "    ]\n",
        "\n",
        "    # --- Quadratic coefficients ---\n",
        "    coeff_quad_xx = []  # Item-item terms (i < j)\n",
        "    for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "            coeff_quad_xx.append(float(-P[i, j] + 2 * lambda_penalty * w[i] * w[j]))\n",
        "\n",
        "    coeff_quad_xs = []  # Item-slack terms (all i, all k)\n",
        "    for i in range(n):\n",
        "        for k in range(slack_bits):\n",
        "            coeff_quad_xs.append(float(2 * lambda_penalty * w[i] * (2**k)))\n",
        "\n",
        "    coeff_quad_ss = []  # Slack-slack terms (k < h)\n",
        "    for k in range(slack_bits):\n",
        "        for h in range(k + 1, slack_bits):\n",
        "            coeff_quad_ss.append(float(2 * lambda_penalty * (2**k) * (2**h)))\n",
        "\n",
        "    return {\n",
        "        \"linear_x\": coeff_linear_x,\n",
        "        \"linear_s\": coeff_linear_s,\n",
        "        \"quad_xx\": coeff_quad_xx,\n",
        "        \"quad_xs\": coeff_quad_xs,\n",
        "        \"quad_ss\": coeff_quad_ss,\n",
        "    }"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Small Datasets"
      ],
      "metadata": {
        "id": "klOhTUYAjNXm"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J6yy3H_3VZwO",
        "outputId": "00f92b42-a7b1-4c82-de00-2ccfcc8fcb37"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[10 10  4  0]\n",
            " [ 0  8  6  2]\n",
            " [ 0  0  6  8]\n",
            " [ 0  0  0  7]]\n"
          ]
        }
      ],
      "source": [
        "#Dimension = 4\n",
        "C = 7\n",
        "w = [2, 3, 4, 5]\n",
        "P = np.array([\n",
        "    [10, 10, 4, 0],\n",
        "    [0, 8, 6, 2],\n",
        "    [0, 0, 6, 8],\n",
        "    [0, 0, 0, 7]\n",
        "])\n",
        "print(P)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dimension = 5\n",
        "C = 9\n",
        "w = [3, 2, 3, 4, 5]\n",
        "P = np.array([\n",
        "    [7, 4, 6, 7, 0],\n",
        "    [0, 10, 10, 4, 0],\n",
        "    [0, 0, 8, 6, 2],\n",
        "    [0, 0, 0, 6, 8],\n",
        "    [0, 0, 0, 0, 7]\n",
        "])\n",
        "print(P)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sVElprfhayQ5",
        "outputId": "69a0b17a-6a92-4345-da7d-7db9d8ce7988"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 7  4  6  7  0]\n",
            " [ 0 10 10  4  0]\n",
            " [ 0  0  8  6  2]\n",
            " [ 0  0  0  6  8]\n",
            " [ 0  0  0  0  7]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dimension = 6\n",
        "C = 11\n",
        "w = [4, 3, 2, 3, 4, 5]\n",
        "P = np.array([\n",
        "    [9, 11, 6, 8, 5, 0],\n",
        "    [0, 7, 4, 6, 7, 0],\n",
        "    [0, 0, 10, 10, 4, 0],\n",
        "    [0, 0, 0, 8, 6, 2],\n",
        "    [0, 0, 0, 0, 6, 8],\n",
        "    [0, 0, 0, 0, 0, 7]\n",
        "])\n",
        "print(P)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s8l8xfXndrjl",
        "outputId": "e20ac270-a8d0-48fc-e0d1-bdb8e6e58dd1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 9 11  6  8  5  0]\n",
            " [ 0  7  4  6  7  0]\n",
            " [ 0  0 10 10  4  0]\n",
            " [ 0  0  0  8  6  2]\n",
            " [ 0  0  0  0  6  8]\n",
            " [ 0  0  0  0  0  7]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dimension = 6\n",
        "C = 12\n",
        "w = [2, 3, 4, 5, 6, 7]\n",
        "\n",
        "P = np.array([\n",
        "    [15, 5,  3,  2,  0,  0],\n",
        "    [0,  20, 6,  4,  1,  0],\n",
        "    [0,  0,  18, 5,  3,  0],\n",
        "    [0,  0,  0,  25, 8,  4],\n",
        "    [0,  0,  0,  0,  12, 6],\n",
        "    [0,  0,  0,  0,  0,  10]\n",
        "])"
      ],
      "metadata": {
        "id": "F25drMdNgMIs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Dimension = 8\n",
        "C = 20\n",
        "w = [3, 4, 5, 5, 6, 7, 8, 9]\n",
        "\n",
        "P = np.array([\n",
        "    [20, 8,  6,  5,  0,  0,  0,  0],\n",
        "    [0,  25, 10, 7,  4,  0,  0,  0],\n",
        "    [0,  0,  30, 12, 8,  5,  0,  0],\n",
        "    [0,  0,  0,  35, 15, 9,  6,  0],\n",
        "    [0,  0,  0,  0,  18, 10, 7,  4],\n",
        "    [0,  0,  0,  0,  0,  22, 12, 8],\n",
        "    [0,  0,  0,  0,  0,  0,  15, 10],\n",
        "    [0,  0,  0,  0,  0,  0,  0,  12]\n",
        "])"
      ],
      "metadata": {
        "id": "MqVOKJx9heen"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1b61zAGWC5gl"
      },
      "outputs": [],
      "source": [
        "lambda_penalty = np.max(P) *35 +1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DPg4N3xNFlfP",
        "outputId": "6d51a630-32af-4182-824c-9eaa4b845779"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'linear_x': [-38559.0, -55208.0, -70098.0, -83245.0, -94620.0, -104254.0], 'linear_s': [-20148.0, -38544.0, -70080.0, -112128.0], 'quad_xx': [10507.0, 14013.0, 17518.0, 21024.0, 24528.0, 21018.0, 26276.0, 31535.0, 36792.0, 35035.0, 42045.0, 49056.0, 52552.0, 61316.0, 73578.0], 'quad_xs': [3504.0, 7008.0, 14016.0, 28032.0, 5256.0, 10512.0, 21024.0, 42048.0, 7008.0, 14016.0, 28032.0, 56064.0, 8760.0, 17520.0, 35040.0, 70080.0, 10512.0, 21024.0, 42048.0, 84096.0, 12264.0, 24528.0, 49056.0, 98112.0], 'quad_ss': [3504.0, 7008.0, 14016.0, 14016.0, 28032.0, 56064.0]}\n"
          ]
        }
      ],
      "source": [
        "# Precompute all coefficients\n",
        "coefficients = compute_qkp_coefficients(P, w, C, lambda_penalty)\n",
        "print(coefficients)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5Zlou6jJEzOs"
      },
      "outputs": [],
      "source": [
        "def solve_qkp_with_QAOA(P, w, C, coefficients, lambda_penalty=lambda_penalty,p=1, num_shots=5000):\n",
        "  n = len(w)\n",
        "  #lambda_penalty = np.max(P) * 1000  # Heuristic: ensure penalty dominates\n",
        "  # Slack variables setup\n",
        "  max_slack = max(C - min(w), 0)  # Prevent negative values\n",
        "  slack_bits = int(np.ceil(np.log2(max_slack + 1)))\n",
        "  z_weights = [2**i for i in range(slack_bits)]  # Binary weights for slack\n",
        "  coefficients = compute_qkp_coefficients(P, w, C, lambda_penalty)\n",
        "  linear_x = coefficients[\"linear_x\"]\n",
        "  linear_s = coefficients[\"linear_s\"]\n",
        "  quad_xx = coefficients[\"quad_xx\"]\n",
        "  quad_xs = coefficients[\"quad_xs\"]\n",
        "  quad_ss = coefficients[\"quad_ss\"]\n",
        "\n",
        "  # Total qubits: n (items) + slack_bits\n",
        "  total_qubits = n + slack_bits\n",
        "\n",
        "  # Build the Hamiltonian\n",
        "  hamiltonian = cudaq.SpinOperator()\n",
        "\n",
        "  for i in range(n):\n",
        "    hamiltonian += linear_x[i] * spin.z(i)\n",
        "\n",
        "  for k in range(slack_bits):\n",
        "    hamiltonian += linear_s[k] * spin.z(n + k)\n",
        "\n",
        "  index = 0\n",
        "  for i in range(n):\n",
        "    for j in range(i + 1, n):\n",
        "      hamiltonian += quad_xx[index] * spin.z(i) * spin.z(j)\n",
        "      index += 1\n",
        "\n",
        "  index = 0\n",
        "  for i in range(n):\n",
        "    for k in range(slack_bits):\n",
        "      hamiltonian += quad_xs[index] * spin.z(i) * spin.z(n+k)\n",
        "      index += 1\n",
        "\n",
        "  index = 0\n",
        "  for k in range(slack_bits):\n",
        "    for h in range(k + 1, slack_bits):\n",
        "      hamiltonian +=  quad_ss[index]* spin.z(n + k) * spin.z(n + h)\n",
        "      index += 1\n",
        "  def fourier_init(p, freq=1):\n",
        "    t = np.arange(1, p + 1)\n",
        "    gamma = np.pi / 4 + 0.1 * np.sin(freq * np.pi * t / p)\n",
        "    beta  = np.pi / 8 + 0.1 * np.cos(freq * np.pi * t / p)\n",
        "    return np.concatenate([gamma, beta])\n",
        "  def problem_informed_init(p):\n",
        "    gamma = np.full(p, 0.3 * np.sqrt(C / (np.mean(w) * len(w))))\n",
        "    beta = np.full(p, np.pi/4)\n",
        "    return np.concatenate([gamma, beta])\n",
        "  @cudaq.kernel\n",
        "  def qaoa_ansatz(\n",
        "      gammas: list[float],\n",
        "      betas: list[float],\n",
        "      linear_x: list[float],\n",
        "      linear_s: list[float],\n",
        "      quad_xx: list[float],\n",
        "      quad_xs: list[float],\n",
        "      quad_ss: list[float],\n",
        "      p: int,\n",
        "      ):\n",
        "    q = cudaq.qvector(total_qubits)\n",
        "\n",
        "    # Initial Hadamard layer\n",
        "    h(q)\n",
        "\n",
        "    for layer in range(p):\n",
        "      gamma = gammas[layer]\n",
        "      beta = betas[layer]\n",
        "\n",
        "      #  Cost Unitary (exp(-iγH))\n",
        "      # 1. Linear terms (x_i)\n",
        "      for i in range(n):\n",
        "        rz(2.0 * gamma * linear_x[i], q[i])\n",
        "\n",
        "      # 2. Linear terms (s_k)\n",
        "      for k in range(slack_bits):\n",
        "        rz(2.0 * gamma * linear_s[k], q[n + k])\n",
        "\n",
        "      # 3. Quadratic terms (x_i x_j)\n",
        "      idx = 0\n",
        "      for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "          cx(q[i], q[j])\n",
        "          rz(2.0 * gamma * quad_xx[idx], q[j])\n",
        "          cx(q[i], q[j])\n",
        "          idx += 1\n",
        "\n",
        "      # 4. Quadratic terms (x_i s_k)\n",
        "      idx = 0\n",
        "      for i in range(n):\n",
        "        for k in range(slack_bits):\n",
        "          cx(q[i], q[n + k])\n",
        "          rz(2.0 * gamma * quad_xs[idx], q[n + k])\n",
        "          cx(q[i], q[n + k])\n",
        "          idx += 1\n",
        "\n",
        "      # 5. Quadratic terms (s_k s_h)\n",
        "      idx = 0\n",
        "      for k in range(slack_bits):\n",
        "        for h in range(k + 1, slack_bits):\n",
        "          cx(q[n + k], q[n + h])\n",
        "          rz(2.0 * gamma * quad_ss[idx], q[n + h])\n",
        "          cx(q[n + k], q[n + h])\n",
        "          idx += 1\n",
        "\n",
        "      # --- Mixer Unitary (exp(-iβΣX)) ---\n",
        "      for i in range(total_qubits):\n",
        "        rx(2.0 * beta, q[i])\n",
        "\n",
        "  def expectation(params):\n",
        "    # Split params into gammas and betas\n",
        "    gammas = params[:p]\n",
        "    betas = params[p:]\n",
        "    return cudaq.observe(\n",
        "        qaoa_ansatz,\n",
        "        hamiltonian,  # Your pre-built SpinOperator\n",
        "        gammas,\n",
        "        betas,\n",
        "        coefficients[\"linear_x\"],\n",
        "        coefficients[\"linear_s\"],\n",
        "        coefficients[\"quad_xx\"],\n",
        "        coefficients[\"quad_xs\"],\n",
        "        coefficients[\"quad_ss\"],\n",
        "        p\n",
        "    ).expectation()\n",
        "    # Initial parameters\n",
        "  #init_params_1 = np.random.uniform(0, np.pi, 2 * p)\n",
        "  gamma = np.full(p, 0.85)\n",
        "  beta  = np.full(p, 0.3)\n",
        "  init_params_1 = np.concatenate([gamma,beta])\n",
        "  init_params_2 = np.random.uniform(0, np.pi, 2 * p)\n",
        "  init_params_3 = fourier_init(p, freq=1)\n",
        "  init_params_4 = problem_informed_init(p)\n",
        "  init_params = init_params_4\n",
        "\n",
        "  avg_profit = np.mean(np.diag(P))\n",
        "  avg_weight = np.mean(w)\n",
        "  gamma_init = 0.5 * np.arcsin(np.sqrt(C / (avg_weight * len(w))))  # ~0.2-0.5\n",
        "  beta_init = np.pi / 4  # Maximal mixing\n",
        "  #init_params = np.concatenate([np.full(p, gamma_init), np.full(p, beta_init)])\n",
        "  print(\"Initial parameters:\", init_params)\n",
        "\n",
        "  start_time = time.time()\n",
        "  result = minimize(expectation, init_params, method='COBYLA')\n",
        "  runtime = time.time() - start_time\n",
        "\n",
        "  #samples = cudaq.sample(qaoa_ansatz, result.x[0], result.x[1], shots = num_shots )\n",
        "  # Split the optimized parameters into gammas and betas\n",
        "  optimized_gammas = result.x[:p]\n",
        "  optimized_betas = result.x[p:]\n",
        "\n",
        "  samples = cudaq.sample(qaoa_ansatz, optimized_gammas, optimized_betas, coefficients[\"linear_x\"],\n",
        "        coefficients[\"linear_s\"],\n",
        "        coefficients[\"quad_xx\"],\n",
        "        coefficients[\"quad_xs\"],\n",
        "        coefficients[\"quad_ss\"],\n",
        "        p,\n",
        "        shots_count=num_shots,)\n",
        "  # Process results\n",
        "  best_sample = max(samples.items(), key=lambda x: x[1])[0]\n",
        "  selected_indices = [i for i, bit in enumerate(best_sample) if bit == '1']\n",
        "  new_indices = [i for i in selected_indices if i < len(w)]\n",
        "  total_weight = sum(w[i] for i in new_indices)\n",
        "  total_profit = sum(P[i][j] for i in new_indices for j in new_indices)\n",
        "\n",
        "  return new_indices, total_weight, total_profit, runtime, result.fun"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mwoe3E42XwSG",
        "outputId": "3a1b3798-58c3-4e90-d0dd-9ec3781c452c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial parameters: [0.2        0.2        0.78539816 0.78539816]\n",
            "Selected items: [4]\n",
            "Total weight: 6 / 12 (Feasible)\n",
            "Total profit: 12\n",
            "Runtime: 0.29 seconds\n",
            "Best energy: 77631.52360227949\n"
          ]
        }
      ],
      "source": [
        "selected_indices, total_weight, total_profit, runtime, best_energy= solve_qkp_with_QAOA(P, w, C, coefficients, p = 2)\n",
        "\n",
        "print(\"Selected items:\", selected_indices)\n",
        "print(f\"Total weight: {total_weight} / {C} ({'Feasible' if total_weight <= C else 'Infeasible'})\")\n",
        "print(\"Total profit:\", total_profit)\n",
        "print(f\"Runtime: {runtime:.2f} seconds\")\n",
        "print(\"Best energy:\", best_energy)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TdE1blTqNapq"
      },
      "source": [
        "# QAOA già fornito\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3G1bXhfSNhnm",
        "outputId": "6df3f7ca-f86c-42a4-b622-0d961a4412f1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: cudaq in /usr/local/lib/python3.11/dist-packages (0.11.0)\n",
            "Requirement already satisfied: cuda-quantum-cu12==0.11.0 in /usr/local/lib/python3.11/dist-packages (from cudaq) (0.11.0)\n",
            "Requirement already satisfied: astpretty~=3.0 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (3.0.0)\n",
            "Requirement already satisfied: cuquantum-python-cu12>=25.03 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (25.3.0)\n",
            "Requirement already satisfied: numpy>=1.24 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.10.1 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (1.15.3)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (2.32.3)\n",
            "Requirement already satisfied: nvidia-cublas-cu12~=12.0 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (12.5.3.2)\n",
            "Requirement already satisfied: nvidia-curand-cu12~=10.3 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (10.3.6.82)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12~=12.0 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (12.5.82)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12~=11.4 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (11.6.3.83)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12~=12.0 in /usr/local/lib/python3.11/dist-packages (from cuda-quantum-cu12==0.11.0->cudaq) (12.5.82)\n",
            "Requirement already satisfied: custatevec-cu12~=1.8 in /usr/local/lib/python3.11/dist-packages (from cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (1.8.0)\n",
            "Requirement already satisfied: cutensornet-cu12~=2.7 in /usr/local/lib/python3.11/dist-packages (from cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (2.7.0)\n",
            "Requirement already satisfied: cudensitymat-cu12~=0.1 in /usr/local/lib/python3.11/dist-packages (from cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (0.1.0)\n",
            "Requirement already satisfied: cupy-cuda12x>=13.0 in /usr/local/lib/python3.11/dist-packages (from cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (13.3.0)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.11/dist-packages (from nvidia-cusolver-cu12~=11.4->cuda-quantum-cu12==0.11.0->cudaq) (12.5.82)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12 in /usr/local/lib/python3.11/dist-packages (from nvidia-cusolver-cu12~=11.4->cuda-quantum-cu12==0.11.0->cudaq) (12.5.1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->cuda-quantum-cu12==0.11.0->cudaq) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->cuda-quantum-cu12==0.11.0->cudaq) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->cuda-quantum-cu12==0.11.0->cudaq) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->cuda-quantum-cu12==0.11.0->cudaq) (2025.4.26)\n",
            "Requirement already satisfied: cutensor-cu12<3,>=2.2 in /usr/local/lib/python3.11/dist-packages (from cudensitymat-cu12~=0.1->cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (2.2.0)\n",
            "Requirement already satisfied: fastrlock>=0.5 in /usr/local/lib/python3.11/dist-packages (from cupy-cuda12x>=13.0->cuquantum-python-cu12>=25.03->cuda-quantum-cu12==0.11.0->cudaq) (0.8.3)\n",
            "Initial parameters =  [0.21810696323572243, -0.20613464375211488, 0.2546877639814583, 0.3657985647468064]\n",
            "Optimal value =  -1.999998927115975\n",
            "Optimal parameters =  [1.1187868406824681, -0.5591386753703883, 0.559403603691353, 0.4517996869247546]\n",
            "{ 0101:521 1010:479 }\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!pip install cudaq\n",
        "import cudaq\n",
        "from cudaq import spin\n",
        "\n",
        "from typing import List\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Here we build up a kernel for QAOA with `p` layers, with each layer\n",
        "# containing the alternating set of unitaries corresponding to the problem\n",
        "# and the mixer Hamiltonians. The algorithm leverages the VQE algorithm\n",
        "# to compute the Max-Cut of a rectangular graph illustrated below.\n",
        "\n",
        "#       v0  0---------------------0 v1\n",
        "#           |                     |\n",
        "#           |                     |\n",
        "#           |                     |\n",
        "#           |                     |\n",
        "#       v3  0---------------------0 v2\n",
        "# The Max-Cut for this problem is 0101 or 1010.\n",
        "\n",
        "# The problem Hamiltonian\n",
        "hamiltonian = 0.5 * spin.z(0) * spin.z(1) + 0.5 * spin.z(1) * spin.z(2) \\\n",
        "       + 0.5 * spin.z(0) * spin.z(3) + 0.5 * spin.z(2) * spin.z(3)\n",
        "\n",
        "# Problem parameters.\n",
        "qubit_count: int = 4\n",
        "layer_count: int = 2\n",
        "parameter_count: int = 2 * layer_count\n",
        "\n",
        "\n",
        "@cudaq.kernel\n",
        "def kernel_qaoa(qubit_count: int, layer_count: int, thetas: List[float]):\n",
        "    \"\"\"QAOA ansatz for Max-Cut\"\"\"\n",
        "    qvector = cudaq.qvector(qubit_count)\n",
        "\n",
        "    # Create superposition\n",
        "    h(qvector)\n",
        "\n",
        "    # Loop over the layers\n",
        "    for layer in range(layer_count):\n",
        "        # Loop over the qubits\n",
        "        # Problem unitary\n",
        "        for qubit in range(qubit_count):\n",
        "            x.ctrl(qvector[qubit], qvector[(qubit + 1) % qubit_count])\n",
        "            rz(2.0 * thetas[layer], qvector[(qubit + 1) % qubit_count])\n",
        "            x.ctrl(qvector[qubit], qvector[(qubit + 1) % qubit_count])\n",
        "\n",
        "        # Mixer unitary\n",
        "        for qubit in range(qubit_count):\n",
        "            rx(2.0 * thetas[layer + layer_count], qvector[qubit])\n",
        "\n",
        "\n",
        "# Specify the optimizer and its initial parameters. Make it repeatable.\n",
        "cudaq.set_random_seed(13)\n",
        "optimizer = cudaq.optimizers.COBYLA()\n",
        "np.random.seed(13)\n",
        "optimizer.initial_parameters = np.random.uniform(-np.pi / 8.0, np.pi / 8.0,\n",
        "                                                 parameter_count)\n",
        "print(\"Initial parameters = \", optimizer.initial_parameters)\n",
        "\n",
        "\n",
        "# Define the objective, return `<state(params) | H | state(params)>`\n",
        "def objective(parameters):\n",
        "    return cudaq.observe(kernel_qaoa, hamiltonian, qubit_count, layer_count,\n",
        "                         parameters).expectation()\n",
        "\n",
        "\n",
        "# Optimize!\n",
        "optimal_expectation, optimal_parameters = optimizer.optimize(\n",
        "    dimensions=parameter_count, function=objective)\n",
        "\n",
        "# Print the optimized value and its parameters\n",
        "print(\"Optimal value = \", optimal_expectation)\n",
        "print(\"Optimal parameters = \", optimal_parameters)\n",
        "\n",
        "# Sample the circuit using the optimized parameters\n",
        "counts = cudaq.sample(kernel_qaoa, qubit_count, layer_count, optimal_parameters)\n",
        "print(counts)"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [
        "X9vflrVFujCi",
        "TdE1blTqNapq"
      ],
      "gpuType": "T4",
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPRkjqXJus9Y0rO2mnShcDz",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}